#!/bin/bash
#Wakame setup script for centos images

PATH=/bin:/usr/bin:/sbin:/usr/sbin
LANG=C
LC_ALL=C

LOGFILE=/var/log/$(basename $0).log
USER=root
SSHDIR=/${USER}/.ssh/
KEYSPATH=${SSHDIR}/authorized_keys

METADATA_LOCATION=drive

METADATA_DRIVE_MOUNTPOINT=/mnt/metadata
METADATA_DRIVE_DEVICE=/dev/sdb

mount_metadata_drive() {
  # Check if directory exists
  if [ ! -d ${METADATA_DRIVE_MOUNTPOINT} ]; then
    mkdir ${METADATA_DRIVE_MOUNTPOINT}
  fi
  mount ${METADATA_DRIVE_DEVICE} ${METADATA_DRIVE_MOUNTPOINT}
}

get_metadata_from_server() {
  param=$1
  curl -s http://169.254.169.254/latest/meta-data/${param} && exit 0
}

get_metadata_from_drive() {
  param=$1
  #is_mounted ${METADATA_DRIVE_MOUNTPOINT} || mount_metadata_drive
  # mount the drive if not mounted yet
  mountpoint -q ${METADATA_DRIVE_MOUNTPOINT}
  if [ $? != 0 ]; then
    mount_metadata_drive
  fi

  #TODO: add workaround for user-data
  cat ${METADATA_DRIVE_MOUNTPOINT}/meta-data/${param} && exit 0
}

get_metadata() {
  param=$1
  for i in {1..100}; do
    #curl -s http://169.254.169.254/latest/meta-data/${param} && exit 0
    get_metadata_from_${METADATA_LOCATION} ${param}
    sleep 3
  done
  exit 1
}

logger() {
  cat | tee -a ${LOGFILE}
}

#Add the metadata server to the routing table
#for i in {1..1200}; do
#  DEFAULT_GW=`ip route get 8.8.8.8 | head -n 1 | cut -d ' ' -f3`
#  echo ... ${i} DEFAULT_GW=${DEFAULT_GW} | logger
#  [ -z "${DEFAULT_GW}" ] || break
#  sleep 3
#done
#route add 169.254.169.254 gateway $DEFAULT_GW

# Set up the host name
#HN=`curl -s http://169.254.169.254/latest/meta-data/local-hostname`
HN=`get_metadata local-hostname`
if [ -n "$HN" ]; then
  grep -q "HOSTNAME=$HN" /etc/sysconfig/network
  if [ $? -ne 0 ]; then
    hostname $HN
    sed -i 's/HOSTNAME=.*/HOSTNAME='$HN'/' /etc/sysconfig/network
  fi
  
  # Add it to the hosts file if not there yet
  grep -q "$HN" /etc/hosts
  if [ $? -ne 0 ]; then
    echo '127.0.1.1 '$HN >> /etc/hosts
  fi
fi

# Set up network configuration
for i in `ls ${METADATA_DRIVE_MOUNTPOINT}/meta-data/network/interfaces/macs`; do
  folder=${METADATA_DRIVE_MOUNTPOINT}/meta-data/network/interfaces/macs/${i}
  echo $folder
  mac=`cat $folder/mac`
  echo "ifconfig -a | grep -i $mac | tr -s ' ' | cut -d ' ' -f1" | logger
  nic=`ifconfig -a | grep -i $mac | tr -s ' ' | cut -d ' ' -f1`
  echo $nic | logger
  ip=`cat $folder/local-ipv4s`
  broadcast=`cat $folder/x-broadcast`
  gateway=`cat $folder/x-gateway`
  metric=`cat $folder/x-metric`
  netmask=`cat $folder/x-netmask`
  network=`cat $folder/x-network`
  
  echo "ifconfig $nic up" | logger
  echo "ifconfig $nic $ip netmask $netmask metric $metric broadcast $broadcast" | logger
  echo "route add -net $network netmask $netmask dev $nic" | logger
  ifconfig $nic up
  ifconfig $nic $ip netmask $netmask metric $metric broadcast $broadcast
  route add -net $network netmask $netmask dev $nic
done

# Generate host keys
if [ ! -f /etc/ssh/ssh_host_dsa_key ]; then
  echo "Generating DSA host key" | logger
  ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N ''
fi
if [ ! -f /etc/ssh/ssh_host_rsa_key ]; then
  echo "Generating RSA host key" | logger
  ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ''
fi

# Set up the authorized keys for the users to login
#KEYS=`curl -s http://169.254.169.254/latest/meta-data/public-keys`
KEYS=`get_metadata public-keys/0=`
if [ -n "$KEYS" ]; then
  echo "Setting authorized keys" | logger
  [ -d ${SSHDIR} ] || {
    mkdir -m 700 ${SSHDIR}
    chown ${USER}:${USER} ${SSHDIR}
  }
  # Check if the keys are already authorized
  grep -q "$KEYS" $KEYSPATH
  if [ $? -ne 0 ]; then
    echo $KEYS > $KEYSPATH
    chmod 600 $KEYSPATH
    chown ${USER} $KEYSPATH
  fi
fi

# Important for remote storage.
sync

exit 0
