# -*- coding: utf-8 -*-

require 'fileutils'
require 'isono'
require 'ipaddress'

module Dcmgr::NodeModules

  class ServiceNatbox < Isono::NodeModules::Base
    include Dcmgr::Logger

    initialize_hook do
      logger.info "Initializing Natbox."

      myinstance.worker_thread.pass {
        logger.info "Initializing Natbox worker_thread."

        myinstance.restore

        myinstance.event.subscribe("vnet/network_route/created", '#') { |header, body|
          myinstance.worker_thread.pass {
            myinstance.network_route_created(header, body)
          }
        }
        myinstance.event.subscribe("vnet/network_route/deleted", '#') { |header, body|
          myinstance.worker_thread.pass {
            myinstance.network_route_deleted(header, body)
          }
        }
      }
    end

    terminate_hook do
      logger.info "Terminating Natbox."
    end

    def network_route_created(header, body)
      body.each do |id|
        network_route = get_network_route(id)
        driver.add_nat(network_route[:outer_ipv4], network_route[:inner_ipv4])
      end
    end

    def network_route_deleted(header, body)
      body.each do |id|
        network_route = get_network_route(id)
        driver.remove_nat(network_route[:outer_ipv4], network_route[:inner_ipv4])
      end
    end

    def restore
      driver.remove_all_nat
      # TODO paginate
      rpc.request('natbox-collector', 'get_network_routes').each do |network_route|
        driver.add_nat(network_route[:outer_ipv4], network_route[:inner_ipv4])
      end
    end

    def event
      raise "Only ServiceOpenflow::worker_threads can access this event channel." unless worker_thread.member_thread?
      @event ||= Isono::NodeModules::EventChannel.new(@node)
    end

    def rpc
      @rpc ||= Isono::NodeModules::RpcChannel.new(@node)
    end

    def worker_thread
      @worker_thread ||= Isono::ThreadPool.new(1, 'Natbox')
    end

    private
    def driver
      @driver ||= Dcmgr::Drivers::Natbox.new
    end

    def get_network_route(id)
      rpc.request('natbox-collector', 'get_network_route', id)
    end
  end

end
