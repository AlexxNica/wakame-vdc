# -*- coding: utf-8 -*-

module Dcmgr::NodeModules
  class SGHandler < Isono::NodeModules::Base
    M = Dcmgr::Models

    initialize_hook do
      app = Isono::Rack::ObjectMethod.new(myinstance)
      job = Isono::NodeModules::JobChannel.new(node)
      job.register_endpoint('sg_handler', Isono::Rack.build do
        use Isono::Rack::Sequel
        run proc { |req, res|
          Thread.current[M::BaseNew::LOCK_TABLES_KEY] = {}
          app.call(req, res)
        }
      end)
    end

    def init_vnic(vnic_id)
      p "in init vnic"
      #TODO: Nilchecks for instance and host node
      host_node = M::NetworkVif[vnic_id].instance.host_node
      tasks = []
      call_packetfilter_service(host_node,"init_vnic",vnic_id,tasks)
    end

    def add_sgs_to_vnic(vnic_id,sg_uuids)
      #TODO: Check if we're already in any of these sgs... log warning if we are
      p "adding secg to vnic: #{sg_uuids.inspect} #{vnic_id.inspect}"
    end

    def remove_sgs_from_vnic(vnic_id,sg_uuids)
      #TODO: Check if we are in these sgs... log warning if we aren't
      p "removing secg from vnic: #{sg_uuids.inspect} #{vnic_id.inspect}"
    end

    def destroy_vnic(vnic_id)
      p "in destroy vnic"
      host_node = M::NetworkVif[vnic_id].instance.host_node
      call_packetfilter_service(host_node,"destroy_vnic",vnic_id)
    end

    private
    def call_packetfilter_service(host_node,method,*args)
      # Dcmgr.messaging.submit(host_node,method,*args)
      event.publish("#{host_node[:node_id]}-#{method}",:args => args)
    end

    def event
      @event ||= Isono::NodeModules::EventChannel.new(@node)
    end

  end
end
