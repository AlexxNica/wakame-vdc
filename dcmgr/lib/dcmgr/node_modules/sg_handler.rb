# -*- coding: utf-8 -*-

module Dcmgr::NodeModules
  class SGHandler < Isono::NodeModules::Base
    include Dcmgr::Logger
    include Dcmgr::VNet::SGHandler

    initialize_hook do
      app = Isono::Rack::ObjectMethod.new(myinstance)
      myinstance.job.register_endpoint('sg_handler', Isono::Rack.build do
        use Isono::Rack::Sequel
        run proc { |req, res|
          Thread.current[M::BaseNew::LOCK_TABLES_KEY] = {}
          app.call(req, res)
        }
      end)
    end

    def call(host_node, cmds)
      raise "host_node type mismatch. Expected: 'HostNode'. Got: '#{host_node.class}'." unless host_node.is_a?(Dcmgr::Models::HostNode)
      job.submit("netfilter-handle.#{host_node.node_id}", :apply_cmds , cmds)
    end

    def pf
      @pf ||= Dcmgr::VNet.packetfilter_service.new.tap { |n|
        n.host_caller = self
      }
    end

    def job
      @job ||= Isono::NodeModules::JobChannel.new(node)
    end

    def event
      @event ||= Isono::NodeModules::EventChannel.new(@node)
    end
  end
end
