# -*- coding: utf-8 -*-
$LOAD_PATH.unshift File.expand_path('../../../../../trema/ruby', __FILE__)

require 'eventmachine'
require 'isono'
#require 'ipaddress'
require 'trema'

module Dcmgr
  module NodeModules

    class ServiceOpenFlow < Isono::NodeModules::Base
      include Dcmgr::Logger
      include Dcmgr::Helpers::NicHelper

      config_section do
        desc "configuration file for ofc..."
      end
      
      initialize_hook do
        logger.info "initialize_hook for ofc..."

        # Trema hack...
        $verbose = true

        Dcmgr.run_initializers('sequel')

        EH = CustomEventHandler.new
        EH.set_as_handler

        Trema::Util::cleanup_current_session

        rule = {
          :port_status => "OpenFlowController",
          :packet_in => "OpenFlowController",
          :state_notify => "OpenFlowController"
        }

        @switch_manager = Trema::SwitchManager.new( rule, 6633 )
        @switch_manager.run!

        @openflow_controller = OpenFlowController.new
        @openflow_controller.init_trema
        @openflow_controller.run_immediate!
        
        logger.info "initialize_hook for ofc finished..."
      end

      terminate_hook do
        logger.info "terminate_hook for ofc..."

        @openflow_controller.stop_immediate!
        @openflow_controller.shutdown!

        Trema::Util::cleanup_current_session
      end

      # def create_instance_map
      #   inst_maps = rpc.request('hva-collector', 'get_alive_instances', node.node_id)

      #   viftable_map = {}
      #   inst_maps = inst_maps.map { |inst_map|
      #     viftable_map[ inst_map[:ips].first ] = inst_map[:instance_nics].first[:uuid]

      #     # Does the hva have instance?
      #     unless inst_map[:host_node][:node_id] == node.node_id
      #       logger.warn("no match for the instance: #{inst_map[:uuid]}")
      #       next
      #     end
      #     # Does host have vif?
      #     next unless valid_nic?(inst_map[:instance_nics].first[:uuid])
      #     inst_maps
      #   }.flatten.uniq.compact
      # end

      # def rpc
      #   @rpc ||= Isono::NodeModules::RpcChannel.new(@node)
      # end
    end

    class OpenFlowController < Trema::Controller
      include Dcmgr::Logger

      M=Dcmgr::Models

      def initialize
      end

      def start
        logger.info "OpenFlowController Thread Object Id: #{Thread.current}."
        logger.info "Instances db: #{self.name}, #{Trema::App[self.name]}."

        nw = M::Network["nw-demonet"] || UnknownUUIDError.raise("nw-demonet")

        logger.info "Got network: #{nw}."
      end

      def print_foo
        logger.info "OpenFlowController #{Thread.current}: finished start."
      end

      def switch_ready datapath_id
        logger.info "switch_ready from %#x." % datapath_id

        # There's a short period of time between the switch being
        # activated and features_reply installing flow.
        send_message datapath_id, Trema::FeaturesRequest.new
      end

      def features_reply message
        logger.info "datapath_id: %#x" % message.datapath_id
        logger.info "transaction_id: %#x" % message.transaction_id
        logger.info "n_buffers: %u" % message.n_buffers
        logger.info "n_tables: %u" % message.n_tables
        logger.info "capabilities: %u" % message.capabilities
        logger.info "actions: %u" % message.actions
        logger.info "ports: %s" % message.ports.collect { | each | each.number }.sort.join( ", " )

        send_flow_mod_add(message.datapath_id,
                          :match => Trema::Match.new( ),
                          :priority => 0x0,
                          :actions => Trema::ActionOutput.new( OFPP_NORMAL ) )

        # Send to controller all unmatched packets destined for the
        # meta-data server, and let the controller install the needed
        # flows.
        send_flow_mod_add(message.datapath_id,
                          :match => Trema::Match.new( :dl_type => 0x0800, :nw_proto => 6, :nw_dst => "169.254.169.254", :tp_dst => 80 ),
                          :priority => 0x010,
                          :actions => [Trema::ActionOutput.new( OFPP_CONTROLLER ) ] )

        message.ports.each do | each |
          # Need to look at the datalink address, not guess at numbers.
          if each.number == 1
            # Don't allow packets from the network to reach the controller.
            send_flow_mod_add(message.datapath_id,
                              :match => Trema::Match.new( :in_port => each.number, :dl_type => 0x0800, :nw_proto => 6, :nw_dst => "169.254.169.254", :tp_dst => 80 ),
                              :priority => 0x200 )

          elsif each.number > 1 and each.number < OFPP_MAX
            add_instance message.datapath_id, each
          elsif each.number == OFPP_LOCAL
            logger.info "OFPP_LOCAL setting hw_addr = %s" % each.hw_addr.to_s
            @local_hw = each.hw_addr
          elsif each.number >= OFPP_MAX
          else

          end
        end
        
      end

      def port_status message
        logger.info "port_status from %#x" % message.datapath_id
        logger.info "datapath_id: %#x" % message.datapath_id
        logger.info "reason: #{message.reason}"
        logger.info "in_port: #{message.phy_port.number}"
        logger.info "hw_addr: #{message.phy_port.hw_addr}"
        logger.info "state: %#x" % message.phy_port.state

        case message.reason
        when OFPPR_ADD
          logger.info "Adding new port..."
          add_instance message.datapath_id, message.phy_port
        when OFPPR_DELETE
          logger.info "Deleting port..."
        when OFPPR_MODIFY
          logger.info "Ignoring port modify..."
        end
        
      end

      def packet_in datapath_id, message
        logger.info "Got a packet: datapath_id:%#x in_port:#{message.in_port}, macsa:#{message.macsa}, macda:#{message.macda}, port_no:." % datapath_id

        # Install DNAT route if we get a new connection destined for the
        # meta-data server.

        # Need to use ExactMatch due to lack of proper facilities for
        # inspecting packets.
        tmp_msg = Trema::ExactMatch.from( message )

        logger.info "Matching: %#x #{tmp_msg.nw_proto} #{Trema::IP.new( tmp_msg.nw_dst ).to_s} #{Trema::IP.new( tmp_msg.nw_src ).to_s} #{tmp_msg.tp_dst} #{tmp_msg.tp_src}." % tmp_msg.dl_type

        if tmp_msg.dl_type == 0x0800 and tmp_msg.nw_proto == 6 and Trema::IP.new( tmp_msg.nw_dst ).to_s == "169.254.169.254" and tmp_msg.tp_dst == 80
          install_dnat_entry datapath_id, tmp_msg, OFPP_LOCAL, @local_hw, "192.168.2.23", 9002
          send_packet_out(datapath_id, :packet_in => message, :actions => Trema::ActionOutput.new( OFPP_TABLE ) )
        end

      end

      #
      # Private methods:
      #
      private

      def add_instance datapath_id, port_info
        # Should really do this in a separate table, with the classifier passing us on.
        # send_flow_mod_add(datapath_id,
        #                   :match => Match.new( :in_port => port_info.number, :dl_type => 0x0800, :nw_proto => 6, :nw_dst => "169.254.169.254", :nw_src => "169.254.169.252", :tp_dst => 80 ),
        #                   :priority => 0x100,
        #                   :actions => [ #Trema::ActionSetDlDst.new( Mac.new( "00:1e:0b:ea:fb:7e" ) ),
        #                                Trema::ActionSetNwDst.new( IP.new( "192.168.2.23" ) ),
        #                                Trema::ActionSetTpDst.new( 9002 ),
        #                                Trema::ActionOutput.new( OFPP_LOCAL ) ] )

        # send_flow_mod_add(datapath_id,
        #                   :match => Match.new( :in_port => OFPP_LOCAL, :dl_type => 0x0800, :nw_proto => 6, :nw_dst => "169.254.169.252", :nw_src => "192.168.2.23", :tp_src => 9002 ),
        #                   :priority => 0x100,
        #                   :actions => [ #Trema::ActionSetDlSrc.new( Mac.new( "88:43:e1:42:4f:60" ) ),
        #                                Trema::ActionSetNwSrc.new( IP.new( "169.254.169.254" ) ),
        #                                Trema::ActionSetTpSrc.new( 80 ),
        #                                Trema::ActionOutput.new( port_info.number ) ] )
        
        # send_flow_mod_add(datapath_id,
        #                   :match => Match.new( :in_port => port_info.number, :dl_type => 0x0806, :nw_dst => "169.254.169.254", :nw_src => "169.254.169.252" ),
        #                   :priority => 0x100,
        #                   :actions => [ #Trema::ActionSetDlDst.new( Mac.new( "00:1e:0b:ea:fb:7e" ) ),
        #                                Trema::ActionSetNwDst.new( IP.new( "192.168.2.23" ) ),
        #                                Trema::ActionOutput.new( OFPP_LOCAL ) ] )
        
        # send_flow_mod_add(datapath_id,
        #                   :match => Match.new( :in_port => OFPP_LOCAL, :dl_type => 0x0806, :nw_dst => "169.254.169.252", :nw_src => "192.168.2.23" ),
        #                   :priority => 0x100,
        #                   :actions => [ #Trema::ActionSetDlSrc.new( Mac.new( "88:43:e1:42:4f:60" ) ),
        #                                Trema::ActionSetNwSrc.new( IP.new( "169.254.169.254" ) ),
        #                                Trema::ActionOutput.new( port_info.number ) ] )

        logger.info "Adding instance: #{port_info.number}"
      end

      def install_dnat_entry datapath_id, message, dest_port, dest_hw, dest_ip, dest_tp
        logger.info "Installing DNAT entry: #{dest_port} #{dest_hw} #{dest_ip}:#{dest_tp}"

        send_flow_mod_add(datapath_id,
                          :match => Trema::Match.new( :in_port => message.in_port, :dl_type => message.dl_type, :nw_proto => message.nw_proto,
                                                      :dl_src => message.dl_src.to_s, :dl_dst => message.dl_dst.to_s,
                                                      :nw_src => message.nw_src, :nw_dst => message.nw_dst,
                                                      :tp_src => message.tp_src, :tp_dst => message.tp_dst ),
                          :priority => 0x100,
                          :idle_timeout => 300,
                          :actions => [ Trema::ActionSetDlDst.new( dest_hw ),
                                        Trema::ActionSetNwDst.new( Trema::IP.new( dest_ip ) ),
                                        Trema::ActionSetTpDst.new( dest_tp ),
                                        Trema::ActionOutput.new( dest_port ) ] )

        send_flow_mod_add(datapath_id,
                          :match => Trema::Match.new( :in_port => dest_port, :dl_type => message.dl_type, :nw_proto => message.nw_proto,
                                                      :dl_src => dest_hw.to_s, :dl_dst => message.dl_src.to_s,
                                                      :nw_src => dest_ip, :nw_dst => message.nw_src,
                                                      :tp_src => dest_tp, :tp_dst => message.tp_src ),
                          :priority => 0x100,
                          :idle_timeout => 300,
                          :actions => [ Trema::ActionSetDlSrc.new( message.dl_dst ),
                                        Trema::ActionSetNwSrc.new( Trema::IP.new( message.nw_dst ) ),
                                        Trema::ActionSetTpSrc.new( message.tp_dst ),
                                        Trema::ActionOutput.new( message.in_port ) ] )
      end
    end


    #
    # Event handler glue for Trema.
    #

    $fd_set = {}


    module EventFdConnection
      def initialize connection
        @connection = connection
      end

      def notify_readable
        @connection.notify_readable
      end

      def notify_writable
        @connection.notify_writable
      end

      def unbind
        # EM.next_tick do
        #   # socket is detached from the eventloop, but still open
        #   data = @io.read
        # end
      end  
    end


    class CustomEventHandler < Trema::EventHandler
      include Dcmgr::Logger

      def init_event_handler
        logger.info "Called CustomEventHandler init_event_handler."
      end

      def finalize_event_handler
        logger.info "Called CustomEventHandler finalize_event_handler."
      end

      def stop_event_handler
        logger.info "Called CustomEventHandler stop_event_handler."
        EM.stop
      end

      def run_event_handler_once
        logger.info "Called CustomEventHandler run_event_handler_once."
      end
      
      def set_fd_handler fd, connection
        logger.info "Called CustomEventHandler immediate set_fd_handler, #{fd}."
        
        $fd_set[ fd ] = EM.watch fd, EventFdConnection, connection
      end
      
      def delete_fd_handler fd
        logger.info "Called CustomEventHandler delete_fd_handler, #{fd}."
        connection = $fd_set[ fd ]
        $fd_set[ fd ] = nil

        connection.detach
      end

      def set_readable fd, state
        logger.debug "Called CustomEventHandler set_readable, #{fd}."

        if fd < 0
          logger.error "Called set_readable with negative fd: #{fd}, #{state}."
          return
        end

        $fd_set[ fd ].notify_readable = state
      end

      def set_writable fd, state
        logger.debug "Called CustomEventHandler set_writable, #{fd}."

        if fd < 0
          logger.error "Called set_writable with negative fd: #{fd}, #{state}."
          return
        end

        $fd_set[ fd ].notify_writable = state
      end

      def readable fd
        logger.debug "Called CustomEventHandler readable, #{fd}."
      end

      def writable fd
        logger.debug "Called CustomEventHandler writable, #{fd}."
      end

    end

  end
end
