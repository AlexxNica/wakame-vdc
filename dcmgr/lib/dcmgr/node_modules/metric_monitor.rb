# -*- coding: utf-8 -*-
module Dcmgr
  module NodeModules
    class MetricMonitor < Isono::NodeModules::Base
      include Dcmgr::Logger

      initialize_hook do
        @thread_pool = Isono::ThreadPool.new(1, 'MetricMonitor')
        @monitor = EventMachine::PeriodicTimer.new(30) {
          next if @thread_pool.queue.size > 0
          @thread_pool.pass {
            myinstance.dup.collect_metric
          }
        }
      end

      terminate_hook do
        @monitor.cancel
        @thread_pool.shutdown
      end

      def task_session
        @task_session ||= begin
                            Task::TaskSession.reset!(:thread)
                            Task::TaskSession.current
                          end
      end

      def collect_metric
        logger.info("starting collect metric")
      end

      private
      def job
        @job ||= Isono::NodeModules::JobChannel.new(@node)
      end

      def rpc
        @rcp ||= Isono::NodeModules::RpcChannel.new(@node)
      end

      def event
        @event ||= Isono::NodeModules::EventChannel.new(@node)
      end
    end
  end
end
