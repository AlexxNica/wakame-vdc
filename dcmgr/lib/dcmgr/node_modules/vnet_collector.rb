# -*- coding: utf-8 -*-
require 'isono'
require 'ipaddress'

require 'vnet_api_client'

module Dcmgr
  module NodeModules
    class VnetCollector < Isono::NodeModules::Base
      include Isono::NodeModules
      include Dcmgr::Logger

      initialize_hook do
        endpoint = Dcmgr::Configurations.dcmgr.features.vnet_endpoint
        port = Dcmgr::Configurations.dcmgr.features.vnet_endpoint_port

        VNetAPIClient.uri = "http://#{endpoint}:#{port}"

        rpc = RpcChannel.new(node)
        app = Isono::Rack::ObjectMethod.new(myinstance)
        rpc.register_endpoint('vnet-collector', Isono::Rack.build do
                                use Isono::Rack::DataStore
                                run proc { |req, res|
                                  Thread.current[Models::BaseNew::LOCK_TABLES_KEY] = {}
                                  app.call(req, res)
                                }
                              end)
      end

      terminate_hook do
      end

      def schedule_vifs(instance_uuid)
        instance = Models::Instance[instance_uuid]

        instance.network_vif.each do |vif|
          if_uuid = vif.canonical_uuid.sub(/v/, '')
          VNetAPIClient::Interface.create(
            uuid: if_uuid,
            mode: 'virtual',
            network_uuid: vif.network.canonical_uuid,
            mac_address: vif.mac_addr,
            port_name: if_uuid
          )
        end
      end
    end
  end
end
