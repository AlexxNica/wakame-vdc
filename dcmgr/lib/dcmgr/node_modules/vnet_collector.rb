# -*- coding: utf-8 -*-
require 'isono'
require 'ipaddress'

require 'vnet_api_client'

module Dcmgr
  module NodeModules
    class VnetCollector < Isono::NodeModules::Base
      include Isono::NodeModules
      include Dcmgr::Logger

      initialize_hook do
        endpoint = Dcmgr::Configurations.dcmgr.features.vnet_endpoint
        port = Dcmgr::Configurations.dcmgr.features.vnet_endpoint_port

        VNetAPIClient.uri = "http://#{endpoint}:#{port}"

        rpc = RpcChannel.new(node)
        app = Isono::Rack::ObjectMethod.new(myinstance)
        rpc.register_endpoint('vnet-collector', Isono::Rack.build do
                                use Isono::Rack::DataStore
                                run proc { |req, res|
                                  Thread.current[Models::BaseNew::LOCK_TABLES_KEY] = {}
                                  app.call(req, res)
                                }
                              end)
      end

      terminate_hook do
      end

      def schedule_vifs(instance_uuid)
        instance = Models::Instance[instance_uuid]

        VNetAPIClient::Interface.create(
          mode: 'virtual',
          port_name: instance.network_vif.first.canonical_uuid.sub(/v/, '')
        )
      end

      private

      def job
        @job ||= Isono::NodeModules::JobChannel.new(node)
      end

      def rpc
        @rpc ||= Isono::NodeModules::RpcChannel.new(@node)
      end
    end
  end
end
