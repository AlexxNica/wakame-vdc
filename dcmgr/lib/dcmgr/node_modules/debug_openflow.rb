# -*- coding: utf-8 -*-

module Dcmgr::NodeModules

  class DebugOpenFlow < Isono::NodeModules::Base
    include Isono::NodeModules
    include Dcmgr::Logger

    initialize_hook do
      EM.defer {
        myinstance.broadcast.subscribe('debug/vnet') do |handle,args|
          # next if myinstance.controller.nil?
          myinstance.broadcast.reply(handle, myinstance.method(handle[:key]).call(args))
        end
      }
    end

    terminate_hook do
    end

    def switch_info(args)
      result = { :type => 'openflow' }
      result
    end

    def broadcast
      @broadcast ||= Ext::BroadcastChannel.new(@node)
    end

    def controller
      @@controller
    end

    def self.register_controller(controller)
      @@controller = controller
    end
  end
end
