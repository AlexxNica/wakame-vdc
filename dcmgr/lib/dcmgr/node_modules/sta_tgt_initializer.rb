# -*- coding: utf-8 -*-
require 'isono'

module Dcmgr
  module NodeModules
    class StaTgtInitializer < Isono::NodeModules::Base
      include Dcmgr::Helpers::CliHelper
      include Dcmgr::Helpers::StaTgtHelper
      include Dcmgr::Logger

      initialize_hook do
        
        unless manifest.config.backing_store == 'raw'
          abort('Please set "config.backing_store = \'raw\'" in sta.conf')
        end

        unless manifest.config.iscsi_target == 'linux_iscsi'
          abort('Please set "config.iscsi_target = \'linux_iscsi\'" in sta.conf')
        end

        manifest.config.initiator_address ||= 'ALL'
        manifest.config.start_command ||= 'initctl start tgt'
        manifest.config.stop_command ||= 'initctl stop tgt'
        
        system(manifest.config.start_command)
        EM.defer do
          myinstance.register_volumes
        end
        event = Isono::NodeModules::EventChannel.new(node)
        event.subscribe('hva/instance_terminated', '#') do |args|
          logger.info("refresh on instance_terminated: #{args.inspect}")
        end
      end
      
      terminate_hook do
        system(manifest.config.stop_command)
      end

      def register_volumes
        volumes = rpc.request('sta-collector', 'get_available_volumes') 
        volumes.each { |volume|
          info = volume[:transport_information]
          if volume[:storage_pool][:storage_type] == 'raw'
            register_target(info[:tid], info[:iqn])
            register_logicalunit(info[:tid], info[:lun], info[:backing_store])
            bind_target(info[:tid], manifest.config.initiator_address)
          end
        }
      end
      
      def rpc
        @rpc ||= Isono::NodeModules::RpcChannel.new(@node)
      end 
    end 
  end
end
