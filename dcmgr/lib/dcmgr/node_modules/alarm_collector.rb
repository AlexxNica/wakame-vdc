# -*- coding: utf-8 -*-
require 'isono'

module Dcmgr
  module NodeModules
    class AlarmCollector < Isono::NodeModules::Base
      include Dcmgr::Logger

      initialize_hook do
        app = Isono::Rack::ObjectMethod.new(myinstance)
        rpc = Isono::NodeModules::RpcChannel.new(node)
        rpc.register_endpoint('alarm-collector', Isono::Rack.build do
                                use Isono::Rack::DataStore
                                run proc { |req, res|
                                  Thread.current[Models::BaseNew::LOCK_TABLES_KEY] = {}
                                  app.call(req, res)
                                }
                              end)
      end

      terminate_hook do
      end

      def get_alarm(alarm_id)
        alarm = Dcmgr::Models::Alarm[alarm_id] || raise("Unknown alarm ID: #{alarm_id}")
        alarm.to_hash
      end

      def get_log_alarms
        get_alarms('log')
      end

      private
      def get_alarms(metric_names=[], resource_ids=[])
        metric_names = [metric_names] if metric_names.is_a?(String)
        resource_ids = [resource_ids] if resource_ids.is_a?(String)

        conditions = {}

        unless metric_names.blank?
          conditions[:metric_name] = metric_names
        end

        unless resource_ids.blank?
          conditions[:resource_id] = resource_ids
        end

        alarms = Models::Alarm.filter(conditions).alives.all.map { |alarm|
          alarm.to_hash
        }
        alarms
      end
    end
  end
end
