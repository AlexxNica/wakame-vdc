# -*- coding: utf-8 -*-
require 'isono'
module Dcmgr::NodeModules
  class ServiceNetfilter < Isono::NodeModules::Base
    include Dcmgr::Logger
    include Dcmgr::VNet::Netfilter::NetfilterAgent

    initialize_hook do
      @worker_thread = Isono::ThreadPool.new(1, 'Netfilter')

      event = Isono::NodeModules::EventChannel.new(node)

      #TODO: Init all current vnics
      @worker_thread.pass {
        logger.info "Initializing service netfilter"
        myinstance.remove_all_chains

        ["init_vnic","destroy_vnic", "init_security_group", "destroy_security_group",
          "init_isolation_group", "destroy_isolation_group", "set_vnic_security_groups",
          "update_sg_rules", "update_isolation_group"].each {|event_name|
          event_queue = "hva.#{myinstance.node.manifest.node_instance_id}-#{event_name}"
          logger.info "Subscribing to #{event_queue}."
          myinstance.event.subscribe(event_queue,"#") do |args|
            @worker_thread.pass {
              myinstance.send(event_name,*args)
            }
          end
        }
        myinstance.job.submit("sg_handler","init_host","hva.#{myinstance.node.manifest.node_instance_id}")
      }
    end

    def job
      @job ||= Isono::NodeModules::JobChannel.new(@node)
    end

    def event
      @event ||= Isono::NodeModules::EventChannel.new(@node)
    end
  end
end
