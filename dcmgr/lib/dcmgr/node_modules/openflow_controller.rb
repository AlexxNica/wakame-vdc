# -*- coding: utf-8 -*-
$LOAD_PATH.unshift File.expand_path('../../../../../trema/ruby', __FILE__)

require 'eventmachine'
require 'trema'

module Dcmgr
  module NodeModules

    class OpenFlowController < Trema::Controller
      include Dcmgr::Logger

      attr_reader :ports

      # Re-number these...
      @@mac_route_table = 2
      @@arp_antispoof_table = 4
      @@arp_route_table = 5
      @@metadata_outgoing_table = 6
      @@metadata_incoming_table = 7

      def initialize service_openflow
        @ports = {}
        @service_openflow = service_openflow
        @ovs_ofctl = OvsOfctl.new service_openflow.node.manifest.config
      end

      def start
        logger.info "OpenFlowController Thread Object Id: #{Thread.current}."
        logger.info "Instances db: #{self.name}, #{Trema::App[self.name]}."
      end

      def switch_ready datapath_id
        logger.info "switch_ready from %#x." % datapath_id
        logger.info "default gateway address: #{Isono::Util.default_gw_ipaddr}"

        # There's a short period of time between the switch being
        # activated and features_reply installing flow.
        send_message datapath_id, Trema::FeaturesRequest.new
      end

      def features_reply message
        logger.info "datapath_id: %#x" % message.datapath_id
        logger.info "transaction_id: %#x" % message.transaction_id
        logger.info "n_buffers: %u" % message.n_buffers
        logger.info "n_tables: %u" % message.n_tables
        logger.info "capabilities: %u" % message.capabilities
        logger.info "actions: %u" % message.actions
        logger.info "ports: %s" % message.ports.collect { | each | each.number }.sort.join( ", " )

        message.ports.each do | each |
          if each.number == OFPP_LOCAL
            @local_hw = each.hw_addr
            logger.info "OFPP_LOCAL: hw_addr:#{@local_hw.to_s}"
          end
        end

        message.ports.each do | each |
          # logger.info "Found port: port:#{each.number} mac:#{each.hw_addr.to_s} name:#{each.name} config:#{each.config} "
          # "state:#{each.state} curr:#{each.curr} advertised:#{each.advertised} supported:#{each.supported} peer:#{each.peer}."

          # Need to look at the datalink address, not guess at numbers.
          #
          # TODO: Move handling of this into a dedicated function.
          # TODO: Add OpenFlowPort for all ports.
          if each.number == 1
            logger.info "ETH0 setting hw_addr = %s" % each.hw_addr.to_s
            # install_default_route message.datapath_id, each.number, OFPP_LOCAL

          elsif each.number > 1 and each.number < OFPP_MAX
            ports[each.number] = OpenFlowPort.new(each)

            @service_openflow.add_instance each

          # elsif each.number == OFPP_LOCAL
          # elsif each.number >= OFPP_MAX
          # else
          end

        end

        # Build the routing flow table and some other flows using
        # ovs-ofctl due to the lack of multiple tables support, which
        # was introduced in of-spec 1.1.

        # Flow tables for routing packets after without any filtering
        # or translation.
        
        #
        # Classification
        #
        @ovs_ofctl.add_flow "priority=#{2},arp", "resubmit\\(,#{@@arp_antispoof_table}\\)"
        @ovs_ofctl.add_flow "priority=#{1}",     "resubmit\\(,#{@@mac_route_table}\\)"

        # MAC address based routing. This should really be in the
        # classifier table for best speed.
        @ovs_ofctl.add_flow "priority=#{1},table=#{@@mac_route_table},dl_dst=FF:FF:FF:FF:FF:FF", "flood"
        @ovs_ofctl.add_flow "priority=#{1},table=#{@@mac_route_table},dl_dst=#{@local_hw.to_s}", "local"
        @ovs_ofctl.add_flow "priority=#{0},table=#{@@mac_route_table}", "output:1"

        #
        # ARP routing table
        #

        # ARP anti-spoofing flows.
        @ovs_ofctl.add_flow "priority=#{1},table=#{@@arp_antispoof_table},arp,in_port=#{1}", "resubmit\\(,#{@@arp_route_table}\\)"
        @ovs_ofctl.add_flow "priority=#{1},table=#{@@arp_antispoof_table},arp,in_port=local", "resubmit\\(,#{@@arp_route_table}\\)"
        @ovs_ofctl.add_flow "priority=#{0},table=#{@@arp_antispoof_table},arp", "drop"

        # TODO: How will this handle packets from host or eth0 that
        # spoof the mac of an instance?
        @ovs_ofctl.add_flow "priority=#{1},table=#{@@arp_route_table},arp,dl_dst=FF:FF:FF:FF:FF:FF,arp_tha=00:00:00:00:00:00", "flood"
        @ovs_ofctl.add_flow "priority=#{1},table=#{@@arp_route_table},arp,dl_dst=#{@local_hw.to_s}", "local"
        @ovs_ofctl.add_flow "priority=#{0},table=#{@@arp_route_table},arp", "output:1"

        #
        # Meta-data connections
        #
        @ovs_ofctl.add_flow "priority=#{2},tcp,nw_dst=169.254.169.254,tp_dst=80", "resubmit\\(,#{@@metadata_outgoing_table}\\)"
        @ovs_ofctl.add_flow "priority=#{2},tcp,nw_src=#{Isono::Util.default_gw_ipaddr},tp_src=#{9002}", "resubmit\\(,#{@@metadata_incoming_table}\\)"

        @ovs_ofctl.add_flow "priority=#{4},table=#{@@metadata_outgoing_table},in_port=#{1}", "drop"
        @ovs_ofctl.add_flow "priority=#{4},table=#{@@metadata_outgoing_table},in_port=local", "drop"
        @ovs_ofctl.add_flow "priority=#{0},table=#{@@metadata_outgoing_table}", "controller"

        # We should route normally when not matched.
        @ovs_ofctl.add_flow "priority=#{4},table=#{@@metadata_incoming_table},tcp,in_port=#{1}", "drop"
        @ovs_ofctl.add_flow "priority=#{0},table=#{@@metadata_incoming_table},tcp", "drop"

      end

      def port_status message
        logger.info "port_status from %#x" % message.datapath_id
        logger.info "datapath_id: %#x" % message.datapath_id
        logger.info "reason: #{message.reason}"
        logger.info "in_port: #{message.phy_port.number}"
        logger.info "hw_addr: #{message.phy_port.hw_addr}"
        logger.info "state: %#x" % message.phy_port.state

        case message.reason
        when OFPPR_ADD
          logger.info "Adding instance port: port:#{message.phy_port.number}."
          raise "OpenFlowPort" if ports.has_key? message.phy_port.number

          ports[message.phy_port.number] = OpenFlowPort.new(message.phy_port)
          @service_openflow.add_instance message.phy_port

        when OFPPR_DELETE
          logger.info "Deleting instance port: port:#{message.phy_port.number}."
          raise "UnknownOpenflowPort" if not ports.has_key? message.phy_port.number

          # @service_openflow.delete_openflow_by_instance_id ports[message.phy_port.number].instance if not ports[message.phy_port.number].instance.nil?
          ports.delete message.phy_port.number

        when OFPPR_MODIFY
          logger.info "Ignoring port modify..."
        end
      end

      def packet_in datapath_id, message
        if message.arp?
          logger.info "Got ARP packet; source:#{message.arp_sha.to_s}:#{message.arp_spa.to_s} dest:#{message.arp_tha.to_s}:#{message.arp_tpa.to_s}."
          return
        end

        if message.ipv4? and message.tcp?
          logger.info "Got IPv4/TCP packet; source:#{message.ipv4_saddr.to_s}:#{message.tcp_src_port} dest:#{message.ipv4_daddr.to_s}:#{message.tcp_dst_port}."

          # Add dynamic NAT flows for meta-data connections.
          if message.ipv4_daddr.to_s == "169.254.169.254" and message.tcp_dst_port == 80
            install_dnat_entry datapath_id, message, @@metadata_outgoing_table, @@metadata_incoming_table, OFPP_LOCAL, @local_hw, Isono::Util.default_gw_ipaddr, 9002
            send_packet_out(datapath_id, :packet_in => message, :actions => Trema::ActionOutput.new( :port => OFPP_TABLE ) )
            return
          end

        end

      end

      #
      # Public functions
      #

      # def install_dnat datapath_id, priority, 
      #   prefix = "priority=#{priority},table=#{ 0},tcp"
      # end

      # TODO: Change the input message type to PacketIn.
      def install_dnat_entry datapath_id, message, outgoing_table, incoming_table, dest_port, dest_hw, dest_ip, dest_tp
        logger.info "Installing DNAT entry: #{dest_port} #{dest_hw} #{dest_ip}:#{dest_tp}"

        msg_nw_src = message.ipv4_saddr.to_s
        msg_nw_dst = message.ipv4_daddr.to_s

        # We don't need to match against the IP or port used by the
        # classifier to pass the flow to these tables.

        prefix = "priority=3,idle_timeout=#{300},tcp"

        prefix_outgoing = "#{prefix},table=#{outgoing_table},#{@ovs_ofctl.arg_in_port message.in_port}"
        # classifier_outgoing = "nw_dst=#{msg_nw_dst},tp_dst=#{message.tcp_dst_port}"
        match_outgoing = "dl_src=#{message.macsa.to_s},dl_dst=#{message.macda.to_s},nw_src=#{msg_nw_src},tp_src=#{message.tcp_src_port}"
        action_outgoing = "mod_dl_dst:#{dest_hw},mod_nw_dst:#{dest_ip},mod_tp_dst:#{dest_tp},#{@ovs_ofctl.arg_output dest_port}"

        prefix_incoming = "#{prefix},table=#{incoming_table},#{@ovs_ofctl.arg_in_port dest_port}"
        # classifier_incoming = "nw_src=#{dest_ip},tp_src=#{dest_tp}"
        match_incoming = "dl_src=#{dest_hw.to_s},dl_dst=#{message.macsa.to_s},nw_dst=#{msg_nw_src},tp_dst=#{message.tcp_src_port}"
        action_incoming = "mod_dl_src:#{message.macda.to_s},mod_nw_src:#{msg_nw_dst},mod_tp_src:#{message.tcp_dst_port},#{@ovs_ofctl.arg_output message.in_port}"

        @ovs_ofctl.add_flow "#{prefix_outgoing},#{match_outgoing}", action_outgoing
        @ovs_ofctl.add_flow "#{prefix_incoming},#{match_incoming}", action_incoming
      end

      def install_route port, hw, ip
        # MAC address based routing to instance.
        @ovs_ofctl.add_flow "priority=#{1},table=#{@@mac_route_table},dl_dst=#{hw}", "output:#{port}"
      end

      def remove_route port, hw, ip
        # MAC address based routing to instance.
        @ovs_ofctl.del_flow "table=#{@@mac_route_table},dl_dst=#{hw}"
      end

      def install_arp_antispoof port, hw, ip
        # Require correct ARP source IP/MAC from instance, and protect the instance IP from ARP spoofing.
        @ovs_ofctl.add_flow "priority=#{3},table=#{@@arp_antispoof_table},arp,in_port=#{port},arp_sha=#{hw},nw_src=#{ip}", "resubmit\\(,#{@@arp_route_table}\\)"
        @ovs_ofctl.add_flow "priority=#{2},table=#{@@arp_antispoof_table},arp,nw_src=#{ip}", "drop"

        # Routing of ARP packets to instance.
        @ovs_ofctl.add_flow "priority=#{2},table=#{@@arp_route_table},arp,dl_dst=#{hw},nw_dst=#{ip}", "output:#{port}"
      end

      def remove_arp_antispoof port, hw, ip
        # Require correct ARP source IP/MAC from instance, and protect the instance IP from ARP spoofing.
        @ovs_ofctl.del_flow "table=#{@@arp_antispoof_table},arp,in_port=#{port},arp_sha=#{hw},nw_src=#{ip}"
        @ovs_ofctl.del_flow "table=#{@@arp_antispoof_table},arp,nw_src=#{ip}"

        # Routing of ARP packets to instance.
        @ovs_ofctl.del_flow "table=#{@@arp_route_table},arp,dl_dst=#{hw},nw_dst=#{ip}"
      end


    end


    class OvsOfctl
      include Dcmgr::Logger
      attr_accessor :ovs_ofctl

      def initialize config
        @ovs_ofctl = config.ovs_ofctl_path
        @switch = config.bridge_novlan
      end

      def add_flow flow_match, actions
        command = "#{@ovs_ofctl} add-flow #{@switch} #{flow_match},actions=#{actions}"
        logger.info "'#{command}' => #{system(command)}."
      end

      def del_flow flow_match
        command = "#{@ovs_ofctl} del-flows #{@switch} #{flow_match}"
        logger.info "'#{command}' => #{system(command)}."
      end

      def arg_in_port port_number
        case port_number
        when OpenFlowController::OFPP_LOCAL
          return "in_port=local"
        else
          return "in_port=#{port_number}" if port_number < OpenFlowController::OFPP_MAX
        end
      end

      def arg_output port_number
        case port_number
        when OpenFlowController::OFPP_LOCAL
          return "local"
        else
          return "output:#{port_number}" if port_number < OpenFlowController::OFPP_MAX
        end
      end
    end

    class OpenFlowPort
      attr_reader :port_info
      attr_writer :has_instance
      attr_writer :ip
      attr_writer :mac

      def initialize port_info
        @port_info = port_info
        @has_instance = false
        @ip = nil
        @mac = nil
      end
    end

    class OpenFlowForwardingEntry
      attr_reader :mac
      attr_reader :port_no

      def initialize mac, port_no
        @mac = mac
        @port_no = port_no
      end

      def update port_no
        @port_no = port_no
      end
    end
      
    class OpenFlowForwardingDatabase
      def initialize
        @db = {}
      end

      def port_no_of mac
        dest = @db[mac]

        if dest
          dest.port_no
        else
          nil
        end
      end

      def learn mac, port_no
        entry = @db[mac]

        if entry
          entry.update port_no
        else
          @db[new_entry.mac] = ForwardingEntry.new(mac, port_no)
        end
      end
    end

  end
end
