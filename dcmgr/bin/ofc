#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift File.expand_path('../../../trema/ruby', __FILE__)

$LOAD_PATH.unshift File.expand_path('../../../trema/src/examples/custom_event_loop', __FILE__)

require 'dcmgr/rubygems'
require 'dcmgr'
require 'eventmachine'
require 'isono'
require 'trema'

require 'em-handler'
require 'learning-switch'

#
#
#

class OpenflowManager < Isono::NodeModules::Base
  include Dcmgr::Logger

  config_section do
    desc "configuration file for ofc..."
  end
  
  initialize_hook do
    logger.info "initialize_hook for ofc..."

    # Trema hack...
    $verbose = true

    EH = CustomEventHandler.new
    EH.set_as_handler

    Dcmgr.run_initializers('sequel')
    Trema::Util::cleanup_current_session

    rule = {
      # :port_status => "Dcmgr::NodeModules::OpenFlowController",
      # :packet_in => "Dcmgr::NodeModules::OpenFlowController",
      # :state_notify => "Dcmgr::NodeModules::OpenFlowController"
      :port_status => "LearningSwitch",
      :packet_in => "LearningSwitch",
      :state_notify => "LearningSwitch"
    }

    switch_manager = Trema::SwitchManager.new( rule, 6633 )
    switch_manager.run!

    # @openflow_controller = Dcmgr::NodeModules::OpenFlowController.new(node)
    # @openflow_controller.init_trema
    # @openflow_controller.run_immediate!

    @openflow_controller = LearningSwitch.new()
    @openflow_controller.init_trema
    @openflow_controller.run_immediate!

    logger.info "initialize_hook for ofc finished..."
  end

  terminate_hook do
    logger.info "terminate_hook for ofc..."

    @openflow_controller.stop_immediate!

    Trema::Util::cleanup_current_session
  end
end


Dcmgr.configure(File.expand_path('../../config/dcmgr.conf', __FILE__))

include Isono::Runner::RpcServer

manifest = DEFAULT_MANIFEST.dup
manifest.instance_eval do
  node_name 'ofc'
  node_instance_id "#{Isono::Util.default_gw_ipaddr}"
  load_module Isono::NodeModules::NodeHeartbeat
  load_module OpenflowManager
  
  config do |c|
  end

#  load_config File.expand_path('config/ofc.conf', app_root)
end


start(manifest) do
end
