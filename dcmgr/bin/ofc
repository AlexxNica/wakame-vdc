#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift File.expand_path('../../../trema/ruby', __FILE__)

require 'dcmgr/rubygems'
require 'dcmgr'
require 'eventmachine'
require 'isono'
require 'trema'

#Dcmgr.configure
#Dcmgr.run_initializers('sequel')

# export TREMA_HOME=/usr/share/axsh/wakame-vdc/trema; export TREMA_TMP=/usr/share/axsh/wakame-vdc/trema/tmp/; /usr/share/axsh/wakame-vdc/trema/objects/switch_manager/switch_manager --logging_level=debug --port=6633 -- port_status::OpenFlowController packet_in::OpenFlowController state_notify::OpenFlowController

# def packet_in xxxxx xxxx
#  EM.schedule {
#    # already in DB(EM) thread

#    # back to Trema's thread
#    Tream.send_thread {
#    send_flow_mod_add()
#  }
# end

class OpenflowManager < Isono::NodeModules::Base
  include Dcmgr::Logger

  config_section do
    desc "configuration file for ofc..."
  end
  
  initialize_hook do
    logger.info "initialize_hook for ofc..."

    # Trema hack...
    $verbose = true

    Dcmgr.run_initializers('sequel')
    Trema::Util::cleanup_current_session

    @context = Trema::DSL::Context.new

    rule = {
      :port_status => "Dcmgr::NodeModules::OpenFlowController",
      :packet_in => "Dcmgr::NodeModules::OpenFlowController",
      :state_notify => "Dcmgr::NodeModules::OpenFlowController"
    }

    switch_manager = Trema::SwitchManager.new( rule, @context.port )
    switch_manager.run!

    openflow_controller = Dcmgr::NodeModules::OpenFlowController.new(node)

    # A process fork is not what we want, however it is the only thing
    # that works atm.
    @ofc_pid = fork {
      # This ends up using it's own event loop, which we don't like very much.
      openflow_controller.run!
    }
    begin
      if !Process.waitpid(@ofc_pid, Process::WNOHANG).nil?
        abort("ofc is terminated unexpectedly")
      end
    rescue Errno::ECHILD
      abort("Failed to exec ofc process.")
    end

    # @ofc_pid = Thread.fork {
    #   # This doesn't work, need to replace Trema's event loop...
    #   openflow_controller.run!
    # }

    logger.info "initialize_hook for ofc finished..."
  end

  terminate_hook do
    logger.info "terminate_hook for ofc..."

    Trema::Util::cleanup_current_session
  end
end


Dcmgr.configure(File.expand_path('../../config/dcmgr.conf', __FILE__))

include Isono::Runner::RpcServer

manifest = DEFAULT_MANIFEST.dup
manifest.instance_eval do
  node_name 'ofc'
  node_instance_id "#{Isono::Util.default_gw_ipaddr}"
  load_module Isono::NodeModules::NodeHeartbeat
#  load_module Dcmgr::NodeModules::OpenFlowHelper
  load_module OpenflowManager
  
  config do |c|
  end

#  load_config File.expand_path('config/ofc.conf', app_root)
end


start(manifest) do
end
