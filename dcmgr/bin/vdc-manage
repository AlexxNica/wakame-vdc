#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'dcmgr/rubygems'
require 'dcmgr'
require 'isono'

require 'thor'
require 'thor/group'
require 'erb'


#################
# CLI main part

Dcmgr.configure(File.expand_path('../../config/dcmgr.conf', __FILE__))
Dcmgr.run_initializers('sequel')

class RootCli < Thor
  register(Dcmgr::Cli::Network,  Dcmgr::Cli::Network.namespace, "network sub-command", "Operations for network information")
  register(Dcmgr::Cli::Host, Dcmgr::Cli::Host.namespace, "host sub-command", "Operations for host node")
  register(Dcmgr::Cli::Storage, Dcmgr::Cli::Storage.namespace, "storage sub-command", "Operations for storage node")
  register(Dcmgr::Cli::AccountCli, Dcmgr::Cli::AccountCli.namespace, "account sub-command", "Operations for accounts")
  register(Dcmgr::Cli::UsersCli, Dcmgr::Cli::UsersCli.namespace, "user sub-command", "Operations for users")
  register(Dcmgr::Cli::Vlan, Dcmgr::Cli::Vlan.namespace, "vlan sub-command", "Operations for vlan leases")
  register(Dcmgr::Cli::Image, Dcmgr::Cli::Image.namespace, "image sub-command", "Operations for machine images")
  register(Dcmgr::Cli::KeyPair, Dcmgr::Cli::KeyPair.namespace, "keypair sub-command", "Operations for key pairs.")
  register(Dcmgr::Cli::Group, Dcmgr::Cli::Group.namespace, "group sub-command", "Operations for security groups.")
  register(Dcmgr::Cli::Spec, Dcmgr::Cli::Spec.namespace, "spec sub-command", "Operations for instance specifications.")
  register(Dcmgr::Cli::Tag, Dcmgr::Cli::Tag.namespace, "tag sub-command", "Operations for tags.")
end


begin
  RootCli.start
rescue => e
  e = Dcmgr::Cli::Error.new(e,101) unless e.is_a?(Dcmgr::Cli::Error)
  STDERR.puts "ERROR: " + e.message
  if e.respond_to?(:exit_code)
    exit(e.exit_code)
  else
    exit(1)
  end
end
