#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'dcmgr/rubygems'
require 'dcmgr'
require 'isono'
require 'fuguta'
require 'socket'

include Isono::Runner::RpcServer

Dcmgr::Configurations.load Dcmgr::Configurations::Hva, [
  ENV['CONF_PATH'].to_s,
  '/etc/wakame-vdc/hva.conf',
  File.expand_path('config/hva.conf', Dcmgr::DCMGR_ROOT)
]

Dcmgr.run_initializers('logger')

manifest = DEFAULT_MANIFEST.dup
manifest.instance_eval do
  node_name 'hva'
  node_instance_id "#{Socket.gethostname}"

  load_module Isono::NodeModules::NodeHeartbeat
  load_module Dcmgr::NodeModules::InstanceMonitor

  if Dcmgr.conf.enabled_feature_resource_monitor
    load_module Dcmgr::NodeModules::Monitor
  end

  case Dcmgr.conf.edge_networking
  when 'openflow'
    load_module Dcmgr::NodeModules::DebugOpenFlow
    load_module Dcmgr::NodeModules::ServiceOpenFlow
  when 'off'
    # Don't load openflow nor netfilter
  when 'openvnet'
    # Do not do anything, or something might be added...
  when 'netfilter'
    load_module Dcmgr::NodeModules::ServiceNetfilter
  else
    raise "Configuration error: '#{Dcmgr.conf.edge_networking}' is not " +
          "a valid option for edge_networking. Valid options are 'openflow'," +
          " 'netfilter', 'legacy_netfilter' and 'off'"
  end

  load_module Dcmgr::NodeModules::AlarmConfigUpdater
end

Isono.at_disconnected do
  EM.stop { exit }
end

start(manifest) do
  endpoint "windows-handle.#{@node.node_id}", Dcmgr::Rpc::WindowsHandler
  endpoint "hva-handle.#{@node.node_id}", Dcmgr::Rpc::HvaHandler
  endpoint "local-store-handle.#{@node.node_id}", Dcmgr::Rpc::LocalStoreHandler
  endpoint "migration-handle.#{@node.node_id}", Dcmgr::Rpc::MigrationHandler
end
