#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'dcmgr/rubygems'
require 'dcmgr'
require 'isono'

include Isono::Runner::RpcServer

path = ['/etc/wakame-vdc/bksta.conf', File.expand_path('config/bksta.conf', Dcmgr::DCMGR_ROOT)].find { |i| File.exists?(i) }
abort("ERROR: Failed to load bksta.conf") if path.nil?

begin
  Dcmgr.instance_eval {
    @conf = Dcmgr::Configurations::Bksta.load(path)
  }
rescue NoMethodError => e
  abort("Syntax Error: #{path}\n  #{e.backtrace.first} #{e.message}")
rescue Dcmgr::Configuration::ValidationError => e
  abort("Validation Error: #{path}\n  " +
        e.errors.join("\n  ")
        )
end
Dcmgr.run_initializers('logger')

class Test < Isono::NodeModules::Base
  include Dcmgr::Logger
  
  initialize_hook do
    Dcmgr::Messaging::JobQueue.backend :AMQPClient, self.node
    
    EM.next_tick do
      queue_worker = Dcmgr::NodeModules::JobQueueWorker.new(self.node)
      #queue_worker.subscribe("backup_storage.copy_to.#{self.node.node_id}", 1) do |job|
      queue_worker.subscribe("backup_storage.copy_to.bksta", 1) do |job|
        params = job[:params]
        puts "/bin/cat #{File.expand_path(params[:backup_object][:object_key], '/mnt/work1/vdctmp/images')} > /dev/null"
        system("/bin/cat #{File.expand_path(params[:backup_object][:object_key], '/mnt/work1/vdctmp/images')} > /dev/null")
      end
    end
  end
end

manifest = Isono::Runner::RpcServer::DEFAULT_MANIFEST.dup
manifest.instance_eval do
  node_name 'bksta'
  node_instance_id `/bin/hostname`.chomp

  load_module Isono::NodeModules::NodeHeartbeat
  load_module Dcmgr::NodeModules::JobQueueWorker
  load_module Test
end

Isono.at_disconnected do
  EM.stop { exit }
end

class BackupStorageHandler < EndpointBuilder
  job :export_object do
  end

  job :fetch_object do
    params[:src_uri]
  end
end


start(manifest) do
#  endpoint "bksta-handle.#{@node.node_id}", BackupStorageHandler
end
