{
    "docs": [
        {
            "location": "/",
            "text": "What is Wakame-vdc?\n\n\nThere are a couple of ways you could answer this question.\n\n\n\n\n\n\nWakame-vdc is a virtual data center. You may have heard of virtual machines. Those virtualize a single computer. What Wakame-vdc does is virtualize an entire data center. More on that on the \nConcept\n page.\n\n\n\n\n\n\nWakame-vdc is an IaaS (Infrastructure as a Service) cloud computing framework. Basically you can set it up and offer server infrastructure \n\"up in the cloud\"\n. Users can control Wakame-vdc through a web browser. That means you can for example set up Wakame-vdc and let users rent virtual servers from you. Some of the companies currently using Wakame-vdc do just that.\n\n\n\n\n\n\nWakame-vdc is free open source software. The source is freely available on \nGithub\n. Everybody is welcome to contribute to development and the software can be freely distributed. (Within the rules of the LGPL license)\n\n\nThe following companies are currently using Wakame-vdc in production.\n\n\n\n\nKyushu Electric Power Co., Ltd.\n\n\nNational Institute of Informatics\n\n\nNTT PC Communications\n\n\nNTT PC Web Arena VPS Cloud\n\n\n\n\n\n\nKyocera Communication Systems Co., Ltd.\n\n\nKCCS GreenOffice Unified Cloud\n\n\n\n\n\n\nTIS Inc.\n\n\n\n\nDon't hesitate to let us know if you also use Wakame-vdc.\n\n\nQuick Start\n\n\nWakame-vdc pre-installed in VirtualBox\n\n\nThis is the fastest most painless way to get yourself a working Wakame-vdc environment to play with. Just download the image, follow the VirtualBox setup steps and you're good to go.\n\n\nWakame-vdc install guide on a single Centos 6 host\n\n\nThis guide will teach you how to install Wakame-vdc on your own server. The end result will be similar to the VirtualBox image but since you're installing everything yourself, you will learn much more about the different components that make up Wakame-vdc.\n\n\nContact us\n\n\nThe best way to contact us is to send an e-mail to the \nWakame Users Group\n on Google Groups. Please don't hesitate to ask us any questions. We realise Wakame-vdc is difficult to set up and that our documentation is limited at this time. If you want to try it out, we'll do our best to help you.\n\n\nIf you happen to be in Tokyo, you can also attend one of our Wakame Users Group events. They are open to everybody. Further details on \nhttp://wakameusersgroup.org\n.",
            "title": "Home"
        },
        {
            "location": "/#what-is-wakame-vdc",
            "text": "There are a couple of ways you could answer this question.    Wakame-vdc is a virtual data center. You may have heard of virtual machines. Those virtualize a single computer. What Wakame-vdc does is virtualize an entire data center. More on that on the  Concept  page.    Wakame-vdc is an IaaS (Infrastructure as a Service) cloud computing framework. Basically you can set it up and offer server infrastructure  \"up in the cloud\" . Users can control Wakame-vdc through a web browser. That means you can for example set up Wakame-vdc and let users rent virtual servers from you. Some of the companies currently using Wakame-vdc do just that.    Wakame-vdc is free open source software. The source is freely available on  Github . Everybody is welcome to contribute to development and the software can be freely distributed. (Within the rules of the LGPL license)  The following companies are currently using Wakame-vdc in production.   Kyushu Electric Power Co., Ltd.  National Institute of Informatics  NTT PC Communications  NTT PC Web Arena VPS Cloud    Kyocera Communication Systems Co., Ltd.  KCCS GreenOffice Unified Cloud    TIS Inc.   Don't hesitate to let us know if you also use Wakame-vdc.",
            "title": "What is Wakame-vdc?"
        },
        {
            "location": "/#quick-start",
            "text": "Wakame-vdc pre-installed in VirtualBox  This is the fastest most painless way to get yourself a working Wakame-vdc environment to play with. Just download the image, follow the VirtualBox setup steps and you're good to go.  Wakame-vdc install guide on a single Centos 6 host  This guide will teach you how to install Wakame-vdc on your own server. The end result will be similar to the VirtualBox image but since you're installing everything yourself, you will learn much more about the different components that make up Wakame-vdc.",
            "title": "Quick Start"
        },
        {
            "location": "/#contact-us",
            "text": "The best way to contact us is to send an e-mail to the  Wakame Users Group  on Google Groups. Please don't hesitate to ask us any questions. We realise Wakame-vdc is difficult to set up and that our documentation is limited at this time. If you want to try it out, we'll do our best to help you.  If you happen to be in Tokyo, you can also attend one of our Wakame Users Group events. They are open to everybody. Further details on  http://wakameusersgroup.org .",
            "title": "Contact us"
        },
        {
            "location": "/concept/",
            "text": "Why virtualize?\n\n\nThink about the concept of virtual machines like \nVirtualBox\n or \nKVM\n for a bit. What do they do? They run on some kind of physical hardware. It can be either a big tower PC or a small laptop. The exact same virtual machines can run on either hardware.\n\n\nA virtual machine is software and software can be copied. Therefore virtual machines can be easily backed up and reverted to a previous state. Much the same way, virtual machines can easily be cloned or migrated to different hardware.\n\n\nA virtual data center like Wakame-vdc extends this from a single machine to an entire data center. Wakame-vdc consists of several components that communicate through the network. You can install all these components together on a single laptop, or you can run them all on separate servers in a physical data center. On top of either you are able to run a virtual data center.\n\n\nVirtual data center components\n\n\nThere are three things that make up a data center, either physical or virtual: \nservers\n, \nnetwork\n and \nstorage\n.\n\n\nServers\n\n\nWakame-vdc virtualizes servers by implementing the very virtual machine software (hypervisors) mentioned at the top of this page. Check out the \nF.A.Q.\n to see which ones it uses exactly.\n\n\nWakame-vdc keeps track of a number of \nmachine images\n. These are essentially virtual servers. It doesn't boot these up directly though. Instead it boots \ninstances\n of these images. That basically means that it starts up a copy of a machine image, leaving the original image unchanged. In theory you can start up an infinite amount of instances.\n\n\nNetwork\n\n\nWakame-vdc by itself has only partial network virtualization. Namely, it has a virtualized firewall that updates itself automatically as the data center changes. This is refered to as security groups.\n\n\nIn order to let users connect to instances, Wakame-vdc uses bridged networking. This is explained in the usage guides of several hypervisors and beyond the scope of this wiki.\n\n\nIn order to do full network virtualization, Wakame-vdc integrates with our other product, \nOpenVNet\n. OpenVNet achieves full network virtualization using \nOpenFlow\n. This is currently still experimental.\n\n\nStorage\n\n\nWakame-vdc virtualizes storage using \niSCSI\n targets or \nNFS\n. In the case of iSCSI, several backends are supported.\n\n\nFrom the user's perspective, Wakame-vdc's storage consists of virtual disks referred to as \nvolumes\n. A volume can be compared to an external hard drive. It can be attached to and detached from instances on the fly.\n\n\nWhy virtualize the data center?\n\n\nVirtualizing the data center provides these merits:\n\n\n\n\n\n\nPortability\n\n\n\n\n\n\nScalability\n\n\n\n\n\n\nReliability\n\n\n\n\n\n\nPortability\n\n\nAt the top of this page we mentioned that Wakame-vdc can run on all kinds of hardware ranging from a single laptop to a big physical data center with many servers. Once you've created a virtual data center on that single laptop, you are able to migrate it over to a production environment running on a big physical data center with relative ease.\n\n\nScalability\n\n\nWhen you need to add a new server to a physical data center, what do you do? You buy the hardware, put it in place and set up the networking infrastructure and firewalls to connect it. It's a very time consuming and expensive process.\n\n\nIn a virtual data center like Wakame-vdc, all you do is click a few buttons. This creates a new server (instance) and puts it in the data center while network settings get configured automatically. Depending on the size of the instance's machine image, it comes up in a matter of seconds.\n\n\nNow imagine that a user has a website running on top of a virtual data center. They get a traffic spike and the instances hosting their website just aren't enough any more. They are now able to quickly create a bunch of new instances to help you take care of that extra traffic. Once things settle down again, you can easily terminate those instances.\n\n\nReliability\n\n\nA virtual data center provides much more flexible failover alternatives. From the user's point of view it doesn't matter on which physical server an instance is running. All the user cares about is being able to connect to their instance. If a physical server fails, instances can be quickly migrated to another physical server.\n\n\nSince a virtual data center is software and software can be copied, it is easy to take regular backups of certain servers or even the entire data center.",
            "title": "Concept"
        },
        {
            "location": "/concept/#why-virtualize",
            "text": "Think about the concept of virtual machines like  VirtualBox  or  KVM  for a bit. What do they do? They run on some kind of physical hardware. It can be either a big tower PC or a small laptop. The exact same virtual machines can run on either hardware.  A virtual machine is software and software can be copied. Therefore virtual machines can be easily backed up and reverted to a previous state. Much the same way, virtual machines can easily be cloned or migrated to different hardware.  A virtual data center like Wakame-vdc extends this from a single machine to an entire data center. Wakame-vdc consists of several components that communicate through the network. You can install all these components together on a single laptop, or you can run them all on separate servers in a physical data center. On top of either you are able to run a virtual data center.",
            "title": "Why virtualize?"
        },
        {
            "location": "/concept/#virtual-data-center-components",
            "text": "There are three things that make up a data center, either physical or virtual:  servers ,  network  and  storage .  Servers  Wakame-vdc virtualizes servers by implementing the very virtual machine software (hypervisors) mentioned at the top of this page. Check out the  F.A.Q.  to see which ones it uses exactly.  Wakame-vdc keeps track of a number of  machine images . These are essentially virtual servers. It doesn't boot these up directly though. Instead it boots  instances  of these images. That basically means that it starts up a copy of a machine image, leaving the original image unchanged. In theory you can start up an infinite amount of instances.  Network  Wakame-vdc by itself has only partial network virtualization. Namely, it has a virtualized firewall that updates itself automatically as the data center changes. This is refered to as security groups.  In order to let users connect to instances, Wakame-vdc uses bridged networking. This is explained in the usage guides of several hypervisors and beyond the scope of this wiki.  In order to do full network virtualization, Wakame-vdc integrates with our other product,  OpenVNet . OpenVNet achieves full network virtualization using  OpenFlow . This is currently still experimental.  Storage  Wakame-vdc virtualizes storage using  iSCSI  targets or  NFS . In the case of iSCSI, several backends are supported.  From the user's perspective, Wakame-vdc's storage consists of virtual disks referred to as  volumes . A volume can be compared to an external hard drive. It can be attached to and detached from instances on the fly.",
            "title": "Virtual data center components"
        },
        {
            "location": "/concept/#why-virtualize-the-data-center",
            "text": "Virtualizing the data center provides these merits:    Portability    Scalability    Reliability    Portability  At the top of this page we mentioned that Wakame-vdc can run on all kinds of hardware ranging from a single laptop to a big physical data center with many servers. Once you've created a virtual data center on that single laptop, you are able to migrate it over to a production environment running on a big physical data center with relative ease.  Scalability  When you need to add a new server to a physical data center, what do you do? You buy the hardware, put it in place and set up the networking infrastructure and firewalls to connect it. It's a very time consuming and expensive process.  In a virtual data center like Wakame-vdc, all you do is click a few buttons. This creates a new server (instance) and puts it in the data center while network settings get configured automatically. Depending on the size of the instance's machine image, it comes up in a matter of seconds.  Now imagine that a user has a website running on top of a virtual data center. They get a traffic spike and the instances hosting their website just aren't enough any more. They are now able to quickly create a bunch of new instances to help you take care of that extra traffic. Once things settle down again, you can easily terminate those instances.  Reliability  A virtual data center provides much more flexible failover alternatives. From the user's point of view it doesn't matter on which physical server an instance is running. All the user cares about is being able to connect to their instance. If a physical server fails, instances can be quickly migrated to another physical server.  Since a virtual data center is software and software can be copied, it is easy to take regular backups of certain servers or even the entire data center.",
            "title": "Why virtualize the data center?"
        },
        {
            "location": "/demo-image/",
            "text": "Demo Image\n\n\nThis is a \nVirtual Box\n image that contains \nCentOS\n 6.4 with Wakame-vdc pre-installed. This is intended for people to get a first introduction to Wakame-vdc with a minimal amount of configuring required.\n\n\nDownload the Wakame-vdc demo image\n.\n\n\nUnzipped mp5 sum: 7bc7587a0d60629c87895173b093b3bd\n\n\nZipped md5 sum: 41d04365f36cd034ae1f9605e07c189f\n\n\nRequirements\n\n\nAny computer with an x86_64 processor capable of running VirtualBox.\n\n\nWhat works?\n\n\nInstances\n\n\nThis is Wakame-vdc\u2019s key functionality. The ability to start and terminate virtual servers which we call \ninstances\n.\n\n\nSecurity Groups\n\n\nThis is Wakame-vdc\u2019s netfilter based dynamic firewall. You can create \nsecurity groups\n and place \ninstances\n in them. These groups have two functions to them.\n\n\n\n\nFirewall\n\n\n\n\nUsers are able to write firewall rules into \nsecurity groups\n. This will open specific ports on all \ninstances\n in the group.\n\n\n\n\nIsolation\n\n\n\n\nThis provides ARP and IP based isolation between \ninstances\n. Only \nInstances\n that are in the same \nsecurity group\n will be able to communicate on the network. In other words, \ninstances\n in group B will look like they don\u2019t exist to \ninstances\n in group A.\n\n\nBackups\n\n\nThis allows you to create a new \nWakame Machine Image\n from an existing \ninstance\n. You will then in turn be able to start new \ninstances\n of the newly created \nimage\n.\n\n\nLoad Balancers\n\n\nA \nLoad Balancer\n in Wakame-vdc is a special \ninstance\n that will have \nHAProxy\n running in it and can balance network traffic between \ninstances\n. It\u2019s also capable of doing OpenSSL encryption using \nStud\n.\n\n\nSSH Key Pairs\n\n\nWe can log into instances over SSH using RSA private/public \nkey pairs\n. You can let Wakame-vdc create a \nkey pair\n for you or you can register your own existing public key.\n\n\nWhat doesn\u2019t work?\n\n\nVolumes\n\n\nVolumes\n are virtual hard drives that can be attached to and detached from \ninstances\n at will. It\u2019s essentially a virtual version of USB hard drives that you can pass around and plug into different computers.\n\n\nYou will be able to create and delete \nvolumes\n but you won\u2019t be able to attach them to \ninstances\n. That\u2019s because the Wakame-vdc demo image uses OpenVz as the hypervisor for \ninstances\n. At the time of writing, \nvolumes\n are not supported in our OpenVz implementation.\n\n\nSetup\n\n\nDownload and unzip the image.\n\n\nIn VirtualBox, click \nFile\n and select \nPreferences\n.\n\n\n\n\nClick on Network and create a new host-only network.\n\n\n\n\nNow click on the screwdriver icon for host-only network settings.\n\n\n\n\nSet the IPv4 subnet to 10.0.2.2/24. Leave IPv6 fields blank.\n\n\n\n\nDisable the host-only network\u2019s DHCP server.\n\n\n\n\nYou\u2019re done with VirtualBox preferences. Now create a new virtual machine.\n\n\n\n\nSet the following settings for name and operating system.\n\n\n\n\nSet the memory size for the VM. 3GB recommended. 1GB minimal.\n\n\n\n\nSelect \nUse an existing virtual hard drive file\n and browse to the Wakame-vdc demo image that you have downloaded.\n\n\n\n\nYou\u2019ve now set up a VirtualBox VM but you still need to do some extra network settings before Wakame-vdc will work right. Select your new VM and click on \nSettings\n.\n\n\n\n\nClick \nNetwork\n and enable \nAdapter 1\n. Attach it to the \nHost-only Adapter\n that you have created above. Make sure to set \nPromiscuous Mode\n to \nAllow All\n. This will allow us to make network connections to Wakame-vdc instances.\n\n\n\n\nAlso enable \nAdapter 2\n and attach it to an \nInternal Network\n. Again set \nPromiscuous Mode\n to \nAllow All\n.\n\n\n\n\nYou\u2019re done. Start the Wakame-vdc demo image.\n\n\n\n\nOn first boot, the image will take some time to set up several Wakame-vdc services like the MySQL databases.\n\n\nUsage\n\n\nYou can access Wakame-vdc\u2019s WebUI by surfing to \nhttp://10.0.2.15:9000\n in a browser of your choice. Javascript needs to be enabled for the WebUI to function. Log into the WebUI with the following credentials.\n\n\nUsername: demo\nPassword: demo\n\n\n\n\nBefore you can start an \ninstance\n, you will need to create a \nsecurity group\n and a \nkey pair\n. Click on \nSecurity Groups\n in the menu on the left and click on \nCreate Security Group\n. Choose a name for your group and paste the following rules. These example rules will open ports for ssh, http, dns and ping.\n\n\n# demo rules for demo instances\ntcp:22,22,ip4:0.0.0.0\ntcp:80,80,ip4:0.0.0.0\nudp:53,53,ip4:0.0.0.0\nicmp:-1,-1,ip4:0.0.0.0\n\n\n\n\nNext we\u2019ll create ourselves a \nkey pair\n. Click on \nKey Pairs\n in the menu on the left. There should be a demo key already registered there. This is again a leftover from development that we haven\u2019t had time to remove. Please ignore it.\n\n\nClick on \nCreate Key Pair\n. You can either register your own public key here, or have Wakame-vdc create a new one for you by leaving the \nPublic Key\n field blank.\n\n\nNow we\u2019re ready to start an instance. Click on \nMachine Images\n in the menu on the left. There will be four \nWakame Machine Images\n available here.\n\n\n\n\nhaproxy1d64\n\n\n\n\nThis is the \nLoad Balancer\n image. The fact that it appears in the list of \nWakame Machine Images\n is a bug in the Wakame-vdc demo image. Since this is only a minor issue, we haven\u2019t fixed it yet. \nLoad Balancers\n are not intended to be started from this image. They should be started from the \nLoadBalancers\n option in the menu on the left.\n\n\n\n\nlbnode1d64\n\n\n\n\nThis is an \nimage\n with a tiny http server on port 80 that returns the \ninstance\u2019s\n host name. This is intended to demonstrate the \nload balancer\n.\n\n\n\n\nvanilla1d64\n\n\ncentos1d64\n\n\n\n\nBoth of these are simple \nimages\n with a basic Centos 6.4 in them. The difference is that \nvanilla1d64\n has password authentication enabled and \ncentos1d64\n doesn\u2019t. Since no working users are configured for \nvanilla1d64\n, these \nimages\n are essentially the same.\n\n\nLet\u2019s start an instance of \ncentos1d64\n as an example. Select it and click \nLaunch Instance\n. In the dialog that comes up, choose an \nInstance Name\n and an optional \nHost Name\n.\n\n\nChoose an \nInstance Spec\n to launch your \ninstance\n with. \nInstance Specs\n define the specifications of your \ninstance\n such as amount of cpus and memory size. You can choose between the following three:\n\n\nvz.small:\n  cpu_cores: 1\n  memory_size: 256\n  hypervisor: 'openvz'\n  quota_weight: 1.0\nvz.large:\n  cpu_cores: 2\n  memory_size: 256\n  hypervisor: 'openvz'\n  quota_weight: 2.0\nvz.xlarge:\n  cpu_cores: 2\n  memory_size: 1536\n  hypervisor: 'openvz'\n  quota_weight: 2.0\n\n\n\n\nYou will see the \nsecurity group\n you just created in \nAvailable Groups\n. Move it to \nLaunch in\n so we can put our new instance in it.\n\n\nNext we need to create a network interface for our \ninstance\n and attach it to a network. Click the drop-down list next to \neth0\n. You will see a list of many possible networks to attach it to. Choose the network \n[nw-demo1] demo1\n. The other networks are leftovers from our development environments and do not work in this image.\n\n\nThe \nUser Data\n below that is a ambiguous field where you can fill in any metadata that you might want to pass to the image. You would then be able to read that data from any custom software you might have running in there. Right now we don\u2019t have any of that stuff so go ahead and leave it blank.\n\n\nFinally there\u2019s \nNetwork Monitoring\n. This is a \nZabbix\n based monitoring service. Just leave it disabled for now.\n\n\nYou\u2019re done. Click on \nLaunch\n.\n\n\nYou will now be able to see the \ninstance\n when you click on \nInstances\n in the menu on the left. You will probably see your \ninstance\n in the \ninitializing\n state. This means Wakame-vdc is starting it up and it will take a little while. Even after your \ninstance\u2019s\n state turns to \nrunning\n, it will still take a little while for the OS inside of it to boot up completely.\n\n\nIf the instance state turns to \nterminated\n, that is likely due to a known bug that we have been encountering only in the Wakame-vdc demo image and haven\u2019t had time to fix yet. Just try again. It\u2019s likely that your instance will work the second time around.\n\n\nYou can ssh into the instance using the \nkey pair\n that you created. They listen on port 22 and you can log in with username \nroot\n. If your own computer is running Linux, this would be a typical command to log into an instance.\n\n\nssh -i /path/to/ssh/key.pem root@10.0.2.100\n\n\n\n\nIt\u2019s possible that you will get this kind of message.\n\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0744 for '/home/geek/ssh_demo.pem' are too open.\nIt is recommended that your private key files are NOT accessible by others.\nThis private key will be ignored.\nbad permissions: ignore key: /home/geek/ssh_demo.pem\n\n\n\n\nThat means everybody can read your private key and that\u2019s not very private now is it? Change your key\u2019s permissions with the following command.\n\n\nchmod 600 /path/to/shh/key.pem\n\n\n\n\nTroubleshooting\n\n\nIf you need to do any troubleshooting, you can ssh into the Wakame-vdc demo image with the following credentials. The image\u2019s ip is 10.0.2.15 and ssh is running on the standard tcp port of 22.\n\n\nUsername: centos\nPassword: centos\n\n\n\n\nWakame-vdc\u2019s logs are located in the following directory:\n\n\n/var/log/wakame-vdc/\n\n\n\n\nWakame-vdc\u2019s configuration files are located here:\n\n\n/etc/wakame-vdc/\n\n\n\n\nYou can perform a large number of CRUD tasks on the Wakame-vdc database using the \nvdc-manage\n command line interface. To use to type the following:\n\n\n[centos@wakame-vdc-1box ~]$ cd /opt/axsh/wakame-vdc/dcmgr/bin/\n[centos@wakame-vdc-1box bin]$ ./vdc-manage\nvdc-manage>> help\n\n\n\n\nvdc-manage\n will give you a list of sub commands. You can type any of them followed by help to get more specific usage on them. There is a similar cli for the WebUI.\n\n\n[centos@wakame-vdc-1box ~]$ cd /opt/axsh/wakame-vdc/frontend/dcmgr_gui/bin/\n[centos@wakame-vdc-1box bin]$ ./gui-manage\ngui-manage>> help",
            "title": "Demo Image"
        },
        {
            "location": "/demo-image/#demo-image",
            "text": "This is a  Virtual Box  image that contains  CentOS  6.4 with Wakame-vdc pre-installed. This is intended for people to get a first introduction to Wakame-vdc with a minimal amount of configuring required.  Download the Wakame-vdc demo image .  Unzipped mp5 sum: 7bc7587a0d60629c87895173b093b3bd  Zipped md5 sum: 41d04365f36cd034ae1f9605e07c189f",
            "title": "Demo Image"
        },
        {
            "location": "/demo-image/#requirements",
            "text": "Any computer with an x86_64 processor capable of running VirtualBox.",
            "title": "Requirements"
        },
        {
            "location": "/demo-image/#what-works",
            "text": "Instances  This is Wakame-vdc\u2019s key functionality. The ability to start and terminate virtual servers which we call  instances .  Security Groups  This is Wakame-vdc\u2019s netfilter based dynamic firewall. You can create  security groups  and place  instances  in them. These groups have two functions to them.   Firewall   Users are able to write firewall rules into  security groups . This will open specific ports on all  instances  in the group.   Isolation   This provides ARP and IP based isolation between  instances . Only  Instances  that are in the same  security group  will be able to communicate on the network. In other words,  instances  in group B will look like they don\u2019t exist to  instances  in group A.  Backups  This allows you to create a new  Wakame Machine Image  from an existing  instance . You will then in turn be able to start new  instances  of the newly created  image .  Load Balancers  A  Load Balancer  in Wakame-vdc is a special  instance  that will have  HAProxy  running in it and can balance network traffic between  instances . It\u2019s also capable of doing OpenSSL encryption using  Stud .  SSH Key Pairs  We can log into instances over SSH using RSA private/public  key pairs . You can let Wakame-vdc create a  key pair  for you or you can register your own existing public key.",
            "title": "What works?"
        },
        {
            "location": "/demo-image/#what-doesnt-work",
            "text": "Volumes  Volumes  are virtual hard drives that can be attached to and detached from  instances  at will. It\u2019s essentially a virtual version of USB hard drives that you can pass around and plug into different computers.  You will be able to create and delete  volumes  but you won\u2019t be able to attach them to  instances . That\u2019s because the Wakame-vdc demo image uses OpenVz as the hypervisor for  instances . At the time of writing,  volumes  are not supported in our OpenVz implementation.",
            "title": "What doesn\u2019t work?"
        },
        {
            "location": "/demo-image/#setup",
            "text": "Download and unzip the image.  In VirtualBox, click  File  and select  Preferences .   Click on Network and create a new host-only network.   Now click on the screwdriver icon for host-only network settings.   Set the IPv4 subnet to 10.0.2.2/24. Leave IPv6 fields blank.   Disable the host-only network\u2019s DHCP server.   You\u2019re done with VirtualBox preferences. Now create a new virtual machine.   Set the following settings for name and operating system.   Set the memory size for the VM. 3GB recommended. 1GB minimal.   Select  Use an existing virtual hard drive file  and browse to the Wakame-vdc demo image that you have downloaded.   You\u2019ve now set up a VirtualBox VM but you still need to do some extra network settings before Wakame-vdc will work right. Select your new VM and click on  Settings .   Click  Network  and enable  Adapter 1 . Attach it to the  Host-only Adapter  that you have created above. Make sure to set  Promiscuous Mode  to  Allow All . This will allow us to make network connections to Wakame-vdc instances.   Also enable  Adapter 2  and attach it to an  Internal Network . Again set  Promiscuous Mode  to  Allow All .   You\u2019re done. Start the Wakame-vdc demo image.   On first boot, the image will take some time to set up several Wakame-vdc services like the MySQL databases.",
            "title": "Setup"
        },
        {
            "location": "/demo-image/#usage",
            "text": "You can access Wakame-vdc\u2019s WebUI by surfing to  http://10.0.2.15:9000  in a browser of your choice. Javascript needs to be enabled for the WebUI to function. Log into the WebUI with the following credentials.  Username: demo\nPassword: demo  Before you can start an  instance , you will need to create a  security group  and a  key pair . Click on  Security Groups  in the menu on the left and click on  Create Security Group . Choose a name for your group and paste the following rules. These example rules will open ports for ssh, http, dns and ping.  # demo rules for demo instances\ntcp:22,22,ip4:0.0.0.0\ntcp:80,80,ip4:0.0.0.0\nudp:53,53,ip4:0.0.0.0\nicmp:-1,-1,ip4:0.0.0.0  Next we\u2019ll create ourselves a  key pair . Click on  Key Pairs  in the menu on the left. There should be a demo key already registered there. This is again a leftover from development that we haven\u2019t had time to remove. Please ignore it.  Click on  Create Key Pair . You can either register your own public key here, or have Wakame-vdc create a new one for you by leaving the  Public Key  field blank.  Now we\u2019re ready to start an instance. Click on  Machine Images  in the menu on the left. There will be four  Wakame Machine Images  available here.   haproxy1d64   This is the  Load Balancer  image. The fact that it appears in the list of  Wakame Machine Images  is a bug in the Wakame-vdc demo image. Since this is only a minor issue, we haven\u2019t fixed it yet.  Load Balancers  are not intended to be started from this image. They should be started from the  LoadBalancers  option in the menu on the left.   lbnode1d64   This is an  image  with a tiny http server on port 80 that returns the  instance\u2019s  host name. This is intended to demonstrate the  load balancer .   vanilla1d64  centos1d64   Both of these are simple  images  with a basic Centos 6.4 in them. The difference is that  vanilla1d64  has password authentication enabled and  centos1d64  doesn\u2019t. Since no working users are configured for  vanilla1d64 , these  images  are essentially the same.  Let\u2019s start an instance of  centos1d64  as an example. Select it and click  Launch Instance . In the dialog that comes up, choose an  Instance Name  and an optional  Host Name .  Choose an  Instance Spec  to launch your  instance  with.  Instance Specs  define the specifications of your  instance  such as amount of cpus and memory size. You can choose between the following three:  vz.small:\n  cpu_cores: 1\n  memory_size: 256\n  hypervisor: 'openvz'\n  quota_weight: 1.0\nvz.large:\n  cpu_cores: 2\n  memory_size: 256\n  hypervisor: 'openvz'\n  quota_weight: 2.0\nvz.xlarge:\n  cpu_cores: 2\n  memory_size: 1536\n  hypervisor: 'openvz'\n  quota_weight: 2.0  You will see the  security group  you just created in  Available Groups . Move it to  Launch in  so we can put our new instance in it.  Next we need to create a network interface for our  instance  and attach it to a network. Click the drop-down list next to  eth0 . You will see a list of many possible networks to attach it to. Choose the network  [nw-demo1] demo1 . The other networks are leftovers from our development environments and do not work in this image.  The  User Data  below that is a ambiguous field where you can fill in any metadata that you might want to pass to the image. You would then be able to read that data from any custom software you might have running in there. Right now we don\u2019t have any of that stuff so go ahead and leave it blank.  Finally there\u2019s  Network Monitoring . This is a  Zabbix  based monitoring service. Just leave it disabled for now.  You\u2019re done. Click on  Launch .  You will now be able to see the  instance  when you click on  Instances  in the menu on the left. You will probably see your  instance  in the  initializing  state. This means Wakame-vdc is starting it up and it will take a little while. Even after your  instance\u2019s  state turns to  running , it will still take a little while for the OS inside of it to boot up completely.  If the instance state turns to  terminated , that is likely due to a known bug that we have been encountering only in the Wakame-vdc demo image and haven\u2019t had time to fix yet. Just try again. It\u2019s likely that your instance will work the second time around.  You can ssh into the instance using the  key pair  that you created. They listen on port 22 and you can log in with username  root . If your own computer is running Linux, this would be a typical command to log into an instance.  ssh -i /path/to/ssh/key.pem root@10.0.2.100  It\u2019s possible that you will get this kind of message.  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0744 for '/home/geek/ssh_demo.pem' are too open.\nIt is recommended that your private key files are NOT accessible by others.\nThis private key will be ignored.\nbad permissions: ignore key: /home/geek/ssh_demo.pem  That means everybody can read your private key and that\u2019s not very private now is it? Change your key\u2019s permissions with the following command.  chmod 600 /path/to/shh/key.pem",
            "title": "Usage"
        },
        {
            "location": "/demo-image/#troubleshooting",
            "text": "If you need to do any troubleshooting, you can ssh into the Wakame-vdc demo image with the following credentials. The image\u2019s ip is 10.0.2.15 and ssh is running on the standard tcp port of 22.  Username: centos\nPassword: centos  Wakame-vdc\u2019s logs are located in the following directory:  /var/log/wakame-vdc/  Wakame-vdc\u2019s configuration files are located here:  /etc/wakame-vdc/  You can perform a large number of CRUD tasks on the Wakame-vdc database using the  vdc-manage  command line interface. To use to type the following:  [centos@wakame-vdc-1box ~]$ cd /opt/axsh/wakame-vdc/dcmgr/bin/\n[centos@wakame-vdc-1box bin]$ ./vdc-manage\nvdc-manage>> help  vdc-manage  will give you a list of sub commands. You can type any of them followed by help to get more specific usage on them. There is a similar cli for the WebUI.  [centos@wakame-vdc-1box ~]$ cd /opt/axsh/wakame-vdc/frontend/dcmgr_gui/bin/\n[centos@wakame-vdc-1box bin]$ ./gui-manage\ngui-manage>> help",
            "title": "Troubleshooting"
        },
        {
            "location": "/installation/",
            "text": "What are we installing?\n\n\nThis guide will set up a basic Wakame-vdc environment on a single host. When we are done with this guide we will have the following features available:\n\n\n\n\n\n\nWe will have a simple \nmachine image\n running Ubuntu 10.04 (Lucid Lynx). We will be able to start instances of this image.\n\n\n\n\n\n\nWe will be able to create dynamic firewalls using \nSecurity Groups\n.\n\n\n\n\n\n\nWe will be able to \nback up running instances\n and turn them into new machine images.\n\n\n\n\n\n\nWe will be able to use either password or rsa key authentication when logging into instances.\n\n\n\n\n\n\nInstallation requirements\n\n\n\n\n\n\nA machine running \nCentos\n 6 with x86 64 bit processor architecture. This can be either bare metal or a virtual machine. Instances are going to run as\n\nOpenVZ\n containers so you don't need to worry about nested virtualization.\n\n\n\n\n\n\nAbout 350 MB of disk space available in the \n/opt\n directory. Wakame-vdc itself is going to be placed there.\n\n\n\n\n\n\n1 GB of RAM should be more than enough for Wakame-vdc to run in this simple demo environment.\n\n\n\n\n\n\nSome free disk space in the \n/var/lib\n directory. How much you need depends on how many instances you want to start. Wakame-vdc is going to place both its machine images and instances data in\n\n/var/lib/wakame-vdc\n.\n\n\n\n\n\n\nThis guide will install only a single machine image. The image itself is compressed and will take up 146 MB. Instances of it will take up 351 MB each when started.\n\n\n\n\nInternet access. (to download rpm packages and machine images)\n\n\n\n\nWhat will this guide do to my machine?\n\n\n\n\n\n\nSince we are going to use \nOpenVZ\n, we will install OpenVZ's \nmodified Linux kernel\n.\n\n\n\n\n\n\nWe are going to set up a \nLinux Bridge\n and connect the host's network interface to it.\n\n\n\n\n\n\nLet's get started\n\n\nYum repository setup\n\n\nAdd the official Wakame-vdc yum repository to \n/etc/yum.repos.d\n.\n\n\nsudo curl -o /etc/yum.repos.d/wakame-vdc-stable.repo -R https://raw.githubusercontent.com/axsh/wakame-vdc/master/rpmbuild/yum_repositories/wakame-vdc-stable.repo\n\n\n\nAdd the OpenVZ yum repository to \n/etc/yum.repos.d\n. Wakame-vdc is confirmed to be working with OpenVZ 2.6.32-042stab055.16 and Axsh provides a repository that hosts this version.\n\n\nsudo curl -o /etc/yum.repos.d/openvz.repo -R https://raw.githubusercontent.com/axsh/wakame-vdc/develop/rpmbuild/yum_repositories/openvz.repo\n\n\n\nAxsh may be hosting this version but they're still the official packages signed with the OpenVZ GPG key. We need to tell RPM to trust that key.\n\n\nsudo rpm --import http://download.openvz.org/RPM-GPG-Key-OpenVZ\n\n\n\nInstall \nEPEL\n. We need to pull some OpenVZ dependencies from here.\n\n\nsudo yum install -y epel-release\n\n\n\nInstall Dcmgr\n\n\nThe dcmgr package contains two things.\n\n\n\n\n\n\nThe Wakame-vdc web API. This is Wakame-vdc's user interface. You tell Wakame-vdc to do stuff by making http requests to this API.\n\n\n\n\n\n\nThe Wakame-vdc collector. This is Wakame-vdc's decision making organ. When you start an instance it decides which HVA (We'll tell you what an HVA is below) will host it, which IP address it\nwill get, etc.\n\n\n\n\n\n\nInstall the dcmgr package with the following command.\n\n\nsudo yum install -y wakame-vdc-dcmgr-vmapp-config\n\n\n\nInstall HVA\n\n\nThe HVA (HyperVisor Agent) is the part of Wakame-vdc that actually starts instances. On a production environment, you would likely have several dedicated bare metal hosts for this. Right now we are\njust going to install one HVA on the same machine as dcmgr.\n\n\nRemark:\n In this installation the instances are going to be \nOpenVZ\n containers. Therefore we install the OpenVZ specific HVA package.\n\n\nsudo yum install -y wakame-vdc-hva-openvz-vmapp-config\n\n\n\nInstall webui\n\n\nThis is Wakame-vdc's GUI. It's actually a \nRails application\n that sits in front of the dcmgr web API.\n\n\nsudo yum install -y wakame-vdc-webui-vmapp-config\n\n\n\nReboot to load OpenVZ kernel\n\n\nThese Wakame-vdc packages have installed OpenVZ as a dependency. OpenVZ runs on a custom kernel. Reboot your machine so that kernel gets loaded.\n\n\nSet up bridged networking\n\n\nWakame-vdc uses bridged networking to allow users to connect to instances. We are going to set up a \nLinux Bridge\n to\nattach instances to.\n\n\nIf you want to connect to instances from somewhere else than the host, we will need a network interface on the host that attaches an outside network to the bridge.\n\n\nFor the sake of this guide, we are going to assume that we will start instances in network \n192.168.3.0/24\n. The host has a network interface \neth0\n with static IP address \n192.168.3.100\n.\n\nChange these values to match your environment.\n\n\nThe network setup that this guide assumes places the host in the same network as the instances. That means the instances will have access to everything the host has access to. If the host can connect to the internet, the instances will be able to as well.\n\n\nRemark:\n With this setup, the host itself will not be able to connect to the instances through networking because of security groups' arp wall. More info on that is available on the \nsecurity groups guide\n\n\nCreate the file \n/etc/sysconfig/network-scripts/ifcfg-br0\n with the following contents\n\n\nDEVICE=br0\nTYPE=Bridge\nBOOTPROTO=static\nONBOOT=yes\nNM_CONTROLLED=no\nIPADDR=192.168.3.100\nNETMASK=255.255.255.0\nGATEWAY=192.168.3.1\nDNS1=8.8.8.8\nDELAY=0\n\n\n\n\nNext we need to attach \neth0\n to the bridge. Modify the file \n/etc/sysconfig/network-scripts/ifcfg-eth0\n with the following contents.\n\n\nRemark:\n If your machine's network interface is called \neth1\n, \nwlan0\n or something else, make sure to edit its file instead. (e.g. ifcfg-eth1, ifcfg-wlan0, etc.) Also make sure to modify the \nDEVICE=\n line accordingly\n\n\nDEVICE=\"eth0\"\nONBOOT=\"yes\"\nBRIDGE=br0\nNM_CONTROLLED=no\n\n\n\n\nRestart the network.\n\n\nBe careful!\n If you have made any mistakes setting up these files for your environment, this next command will cause networking to go down on your machine. Triple check these values if\nyou're running this guide on a remote machine!\n\n\nsudo service network restart\n\n\n\n\nConfiguration\n\n\nNext we are going to configure Wakame-vdc and download a machine image containing Ubuntu 10.04 that we can start instances of. You can either do it manually or run a script we have provided. Both methods will amount to the same result. The script should be easier but doing it manually will teach you more about Wakame-vdc.\n\n\nUsing the script\n\n\nThe script can be found here: \ninstall_guide_demo_data.sh\n\n\nIt will perform all the steps explained below except reserving IP addresses. (which is optional)\n\n\nYou need to tell it about the network you want to start your instances in. Run the script without parameters to see how to use it.\n\n\nAfter running the script and \noptionally reserving ip addresses\n, skip over to the \nStart Wakame-vdc\n section.\n\n\nManual configuration\n\n\nThe different Wakame-vdc services require their own config files. Unfortunately they currently aren't automatically installed with the rpm packages. Until we have that fixed, you will have to copy them over manually.\n\n\nsudo cp /opt/axsh/wakame-vdc/dcmgr/config/dcmgr.conf.example /etc/wakame-vdc/dcmgr.conf\n\nsudo cp /opt/axsh/wakame-vdc/dcmgr/config/hva.conf.example /etc/wakame-vdc/hva.conf\n\nsudo cp /opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/database.yml.example /etc/wakame-vdc/dcmgr_gui/database.yml\n\nsudo cp /opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/dcmgr_gui.yml.example /etc/wakame-vdc/dcmgr_gui/dcmgr_gui.yml\n\nsudo cp /opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/instance_spec.yml.example /etc/wakame-vdc/dcmgr_gui/instance_spec.yml\n\nsudo cp /opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/load_balancer_spec.yml.example /etc/wakame-vdc/dcmgr_gui/load_balancer_spec.yml\n\n\n\n\nCreate the Wakame-vdc database\n\n\nWakame-vdc uses a \nMySQL\n database. Start MySQL and create the database.\n\n\nsudo service mysqld start\nmysqladmin -uroot create wakame_dcmgr\n\n\n\n\nWe can use \nRake\n to create the database tables. Wakame-vdc comes with its own ruby binary that includes Rake.\n\n\ncd /opt/axsh/wakame-vdc/dcmgr\n/opt/axsh/wakame-vdc/ruby/bin/rake db:up\n\n\n\n\nRegister the HVA\n\n\nAs describe above, the HVA or host node is the part of Wakame-vdc that actually starts instances. Wakame-vdc can manage any number of these. The words HVA and host node will be used interchangeably in this guide.\n\n\nWakame-vdc recognises host nodes by their \nnode id\n. That is a unique id that \nAMQP\n uses to identify each service. We will assign the id \ndemo1\n to our HVA.\n\n\nEdit the file \n/etc/default/vdc-hva\n and uncomment the following line:\n\n\nNODE_ID=demo1\n\n\n\n\nNow our HVA process will start up with \ndemo1\n as its \nnode id\n. Next we need to add a database entry to let Wakame-vdc know how much memory, CPU power and disk space it has available, etc.\n\n\nWe can use the \nvdc-manage\n cli to do this. Of course the parameters of this command will vary depending on the capacity of your HVA. Adjust them accordingly.\n\n\n/opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage host add hva.demo1 \\\n   --uuid hn-demo1 \\\n   --display-name \"demo HVA 1\" \\\n   --cpu-cores 100 \\\n   --memory-size 10240 \\\n   --hypervisor openvz \\\n   --arch x86_64 \\\n   --disk-space 102400 \\\n   --force\n\n\n\n\nRemarks:\n  * The \nnode id\n would be \nhva.demo1\n. We set \ndemo1\n in the above step but when the process starts, it is automatically prefixed by \nhva\n.\n\n\n\n\nMemory-size\n and \ncpu-cores\n do not represent the actual memory size and CPU cores of the host node. They represent the amount of either to be offered to instances.\n\n\n\n\nSetting \ncpu-cores\n to 100 means that you can start for example 100 instances with 1 CPU core each or in another example, 50 instances with 2 CPU cores each.\n\n\n\n\nThe \nforce\n flag is set so we can register the host node even though Wakame-vdc can't currently see it through AMQP. Since we haven't started the Wakame-vdc services yet, it's only natural that it can't see it yet. It will once we start them.\n\n\n\n\nDownload and register a machine image\n\n\nOf course we can't start any instances if we don't have a machine image to instantiate. For this guide we are just going to download a simple machine image containing Ubuntu 10.04 (Lucid Lynx).\n\n\nWakame-vdc's default directory for keeping images is \n/var/lib/wakame-vdc/images\n. Create it.\n\n\nsudo mkdir -p /var/lib/wakame-vdc/images\n\n\n\n\nNow download the image in that directory.\n\n\ncd /var/lib/wakame-vdc/images\nsudo curl -O http://dlc.wakame.axsh.jp.s3.amazonaws.com/demo/vmimage/ubuntu-lucid-kvm-md-32.raw.gz\n\n\n\n\nThe image should have the following md5 sum. We will need it when registering it in the database.\n\n\n1f841b195e0fdfd4342709f77325ce29  ubuntu-lucid-kvm-md-32.raw.gz\n\n\n\n\nNow we need to let Wakame-vdc know that it has a machine image to start instances from. First of all here's a brief explanation of how Wakame-vdc treats machine images. There are two terms we'll need to understand here. \nBackup objects\n and \nmachine images\n. A \nbackup object\n is basically a hard drive image. A \nmachine image\n is a backup object that's bootable. In case of a linux instance, the \nmachine image\n would hold the root partition.\n\n\nTo register both the \nbackup object\n and the related \nmachine image\n, we will again use the \nvdc-manage\n cli but since we are going to run more than one operation now, it's more efficient to call it without arguments. This will result in a special shell where we can run \nvdc-manage\n commands. This is more efficient because we only need to establish a connection to the database once and can then feed many commands through it.\n\n\n/opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage\n\n\n\n\nFirst of all we need to tell Wakame-vdc how we are storing these \nbackup objects\n. We are currently just keeping them on the local file system.\n\n\nbackupstorage add \\\n  --uuid bkst-local \\\n  --display-name \"local storage\" \\\n  --base-uri \"file:///var/lib/wakame-vdc/images/\" \\\n  --storage-type local \\\n  --description \"storage on the local filesystem\"\n\n\n\n\nNow register the backup object and assign it to the local storage that we just made.\n\n\nThis image is compressed with gzip to save space. In order to properly manage its disk space usage, Wakame-vdc needs to know both the compressed size and uncompressed size of the image. These translate to the \nsize\n and \nallocation-size\n options respectively.\n\n\nbackupobject add \\\n  --uuid bo-lucid5d \\\n  --display-name \"Ubuntu 10.04 (Lucid Lynx) root partition\" \\\n  --storage-id bkst-local \\\n  --object-key ubuntu-lucid-kvm-md-32.raw.gz \\\n  --size 149084 \\\n  --allocation-size 359940 \\\n  --container-format gz \\\n  --checksum 1f841b195e0fdfd4342709f77325ce29\n\n\n\n\nNext we tell Wakame-vdc that this backup object is a machine image that we can start instances of.\n\n\nimage add local bo-lucid5d \\\n  --account-id a-shpoolxx \\\n  --uuid wmi-lucid5d \\\n  --root-device uuid:148bc5df-3fc5-4e93-8a16-7328907cb1c0 \\\n  --display-name \"Ubuntu 10.04 (Lucid Lynx)\"\n\n\n\n\nRegister a network\n\n\nWakame-vdc needs to know which network instances will be connected to. You can register more than one network and then decide which one to use when you start instances.\n\n\nRemark:\n As described above, this guide assumes that network to be \n192.168.3.0/24\n. Make sure to change these values if you intend to use another network.\n\n\nnetwork add \\\n  --uuid nw-demo1 \\\n  --ipv4-network 192.168.3.0 \\\n  --prefix 24 \\\n  --ipv4-gw 192.168.3.1 \\\n  --dns 8.8.8.8 \\\n  --account-id a-shpoolxx \\\n  --display-name \"demo network\"\n\n\n\n\nWakame-vdc is now aware of this network but it still doesn't know which IP addresses in it are available to assign to instances. Register a dhcp range.\n\n\nnetwork dhcp addrange nw-demo1 192.168.3.1 192.168.3.254\n\n\n\n\n\nYou might be worried because the gateway is included in dhcp range. Don't be. Wakame-vdc is smart enough to know that it can't use that IP address.\n\n\nIf you have other IP addresses inside the dhcp range that can not be used by Wakame-vdc, you need to reserve them so Wakame-vdc knows these can't be used. For example in this guide we were using 192.168.3.100 as the host node's ip address and therefore it can not be used. You can reserve it with the following command. If you do not have any IP addresses that need to be reserved, just skip this step.\n\n\nnetwork reserve nw-demo1 --ipv4 192.168.3.100\n\n\n\n\nWakame-vdc needs to know which mac addresses are available to assign to instances.\n\n\nmacrange add 525400 1 ffffff --uuid mr-demomacs\n\n\n\n\nNext, Wakame-vdc needs to know which bridge to attach its intances' virtual network interfaces (vnics) to, and which interface on that bridge is connected to the outside world. You do that by registering a \ndc network\n.\n\n\nnetwork dc add public --uuid dcn-public --description \"the network instances are started in\"\nnetwork dc add-network-mode public securitygroup\nnetwork forward nw-demo1 public\n\n\n\n\nWe're done with vdc-manage. Exit its shell.\n\n\nexit\n\n\n\n\nEarlier in this guide we have set up a bridge named \nbr0\n and it's connected to the outside world through a network interface \neth0\n. If you are also using these names, you should be fine.\n\n\nIf\n you are using other names, you need to go update \n/etc/wakame-vdc/hva.conf\n. Find the following in that file and change it to match the names that you're using.\n\n\ndc_network('public') {\n  bridge_type 'linux'\n  interface 'eth0'\n  bridge 'br0'\n}\n\n\n\n\nConfigure the GUI\n\n\nThe GUI is a rails application that requires its own database. Create it and initialize its tables using Rake.\n\n\nmysqladmin -uroot create wakame_dcmgr_gui\ncd /opt/axsh/wakame-vdc/frontend/dcmgr_gui/\n/opt/axsh/wakame-vdc/ruby/bin/rake db:init\n\n\n\n\nThe GUI uses user/password authentication. Wakame-vdc's web API has no authentication so on a production environment, you'd want to show only the GUI to the outside world while keeping the web API on a private network.\n\n\nWe're going to be talking about \nusers\n and \naccounts\n here. Their meanings are slightly different.\n\n\n\n\n\n\nAn account is where rights are assigned. An account will be allowed to start a certain amount of instances and own certain resources.\n\n\n\n\n\n\nA user is a username/password combination that has access to one or more accounts. You will log into the Wakame-vdc GUI as a user and get access to the resources owned by any accounts your user is associated with.\n\n\n\n\n\n\nUsers and accounts share a many-to-many relation. A user can belong to many accounts and an account can belong to many users.\n\n\nThe GUI database has a cli called \ngui-manage\n which is similar to vdc-manage.\n\n\n/opt/axsh/wakame-vdc/frontend/dcmgr_gui/bin/gui-manage\n\n\n\n\nLet's use it to create an account for ourselves. This account with uuid \na-shpoolxx\n is a special account that Wakame-vdc uses for certain shared resources.\n\n\naccount add --name default --uuid a-shpoolxx\n\n\n\n\nNext we'll add a user. The \nlogin-id\n is the name we're going to use when logging into the GUI.\n\n\nuser add --name \"demo user\" --uuid u-demo --password demo --login-id demo\n\n\n\n\nNow associate the user and the account.\n\n\nuser associate u-demo --account-ids a-shpoolxx\n\n\n\n\nWe're done with gui-manage. Exit the shell.\n\n\nexit\n\n\n\n\nStart Wakame-vdc\n\n\nStart the rabbitmq server. Wakame-vdc's different processes use AMQP to communicate. Rabbitmq-server is the AMQP exchange managing all that traffic.\n\n\nsudo service rabbitmq-server start\n\n\n\n\nIf you've been following this guide, MySQL should still be running. If it isn't running, start it.\n\n\nsudo service mysqld start\n\n\n\n\nAfter all this hard work we should be able to get Wakame-vdc up and running. Start the upstart jobs.\n\n\nThese 4 upstart jobs can be started in any order as long as \nrabbitmq-server\n and \nmysqld\n have been started first.\n\n\nsudo start vdc-dcmgr\nsudo start vdc-collector\nsudo start vdc-hva\nsudo start vdc-webui\n\n\n\n\nIf everything went right, Wakame-vdc is now up and running. Start a web browser and surf to your machine's IP address on port 9000. If you're using the same IP address as this guide, that would be \n192.168.3.100:9000\n. Log in with user \ndemo\n and password \ndemo\n.\n\n\nThe \nlucid5d\n image has password login through ssh enabled. After starting instances you are able to log in using username \nubuntu\n and password \nubuntu\n. You are of course also able to log in using username \nubuntu\n and a key pair registered with Wakame-vdc.\n\n\nCheck out the \nbasic usage guide\n if you're not sure were to go from here.",
            "title": "Installation"
        },
        {
            "location": "/installation/#what-are-we-installing",
            "text": "This guide will set up a basic Wakame-vdc environment on a single host. When we are done with this guide we will have the following features available:    We will have a simple  machine image  running Ubuntu 10.04 (Lucid Lynx). We will be able to start instances of this image.    We will be able to create dynamic firewalls using  Security Groups .    We will be able to  back up running instances  and turn them into new machine images.    We will be able to use either password or rsa key authentication when logging into instances.",
            "title": "What are we installing?"
        },
        {
            "location": "/installation/#installation-requirements",
            "text": "A machine running  Centos  6 with x86 64 bit processor architecture. This can be either bare metal or a virtual machine. Instances are going to run as OpenVZ  containers so you don't need to worry about nested virtualization.    About 350 MB of disk space available in the  /opt  directory. Wakame-vdc itself is going to be placed there.    1 GB of RAM should be more than enough for Wakame-vdc to run in this simple demo environment.    Some free disk space in the  /var/lib  directory. How much you need depends on how many instances you want to start. Wakame-vdc is going to place both its machine images and instances data in /var/lib/wakame-vdc .    This guide will install only a single machine image. The image itself is compressed and will take up 146 MB. Instances of it will take up 351 MB each when started.   Internet access. (to download rpm packages and machine images)",
            "title": "Installation requirements"
        },
        {
            "location": "/installation/#what-will-this-guide-do-to-my-machine",
            "text": "Since we are going to use  OpenVZ , we will install OpenVZ's  modified Linux kernel .    We are going to set up a  Linux Bridge  and connect the host's network interface to it.",
            "title": "What will this guide do to my machine?"
        },
        {
            "location": "/installation/#lets-get-started",
            "text": "Yum repository setup  Add the official Wakame-vdc yum repository to  /etc/yum.repos.d .  sudo curl -o /etc/yum.repos.d/wakame-vdc-stable.repo -R https://raw.githubusercontent.com/axsh/wakame-vdc/master/rpmbuild/yum_repositories/wakame-vdc-stable.repo  Add the OpenVZ yum repository to  /etc/yum.repos.d . Wakame-vdc is confirmed to be working with OpenVZ 2.6.32-042stab055.16 and Axsh provides a repository that hosts this version.  sudo curl -o /etc/yum.repos.d/openvz.repo -R https://raw.githubusercontent.com/axsh/wakame-vdc/develop/rpmbuild/yum_repositories/openvz.repo  Axsh may be hosting this version but they're still the official packages signed with the OpenVZ GPG key. We need to tell RPM to trust that key.  sudo rpm --import http://download.openvz.org/RPM-GPG-Key-OpenVZ  Install  EPEL . We need to pull some OpenVZ dependencies from here.  sudo yum install -y epel-release  Install Dcmgr  The dcmgr package contains two things.    The Wakame-vdc web API. This is Wakame-vdc's user interface. You tell Wakame-vdc to do stuff by making http requests to this API.    The Wakame-vdc collector. This is Wakame-vdc's decision making organ. When you start an instance it decides which HVA (We'll tell you what an HVA is below) will host it, which IP address it\nwill get, etc.    Install the dcmgr package with the following command.  sudo yum install -y wakame-vdc-dcmgr-vmapp-config  Install HVA  The HVA (HyperVisor Agent) is the part of Wakame-vdc that actually starts instances. On a production environment, you would likely have several dedicated bare metal hosts for this. Right now we are\njust going to install one HVA on the same machine as dcmgr.  Remark:  In this installation the instances are going to be  OpenVZ  containers. Therefore we install the OpenVZ specific HVA package.  sudo yum install -y wakame-vdc-hva-openvz-vmapp-config  Install webui  This is Wakame-vdc's GUI. It's actually a  Rails application  that sits in front of the dcmgr web API.  sudo yum install -y wakame-vdc-webui-vmapp-config  Reboot to load OpenVZ kernel  These Wakame-vdc packages have installed OpenVZ as a dependency. OpenVZ runs on a custom kernel. Reboot your machine so that kernel gets loaded.  Set up bridged networking  Wakame-vdc uses bridged networking to allow users to connect to instances. We are going to set up a  Linux Bridge  to\nattach instances to.  If you want to connect to instances from somewhere else than the host, we will need a network interface on the host that attaches an outside network to the bridge.  For the sake of this guide, we are going to assume that we will start instances in network  192.168.3.0/24 . The host has a network interface  eth0  with static IP address  192.168.3.100 . Change these values to match your environment.  The network setup that this guide assumes places the host in the same network as the instances. That means the instances will have access to everything the host has access to. If the host can connect to the internet, the instances will be able to as well.  Remark:  With this setup, the host itself will not be able to connect to the instances through networking because of security groups' arp wall. More info on that is available on the  security groups guide  Create the file  /etc/sysconfig/network-scripts/ifcfg-br0  with the following contents  DEVICE=br0\nTYPE=Bridge\nBOOTPROTO=static\nONBOOT=yes\nNM_CONTROLLED=no\nIPADDR=192.168.3.100\nNETMASK=255.255.255.0\nGATEWAY=192.168.3.1\nDNS1=8.8.8.8\nDELAY=0  Next we need to attach  eth0  to the bridge. Modify the file  /etc/sysconfig/network-scripts/ifcfg-eth0  with the following contents.  Remark:  If your machine's network interface is called  eth1 ,  wlan0  or something else, make sure to edit its file instead. (e.g. ifcfg-eth1, ifcfg-wlan0, etc.) Also make sure to modify the  DEVICE=  line accordingly  DEVICE=\"eth0\"\nONBOOT=\"yes\"\nBRIDGE=br0\nNM_CONTROLLED=no  Restart the network.  Be careful!  If you have made any mistakes setting up these files for your environment, this next command will cause networking to go down on your machine. Triple check these values if\nyou're running this guide on a remote machine!  sudo service network restart  Configuration  Next we are going to configure Wakame-vdc and download a machine image containing Ubuntu 10.04 that we can start instances of. You can either do it manually or run a script we have provided. Both methods will amount to the same result. The script should be easier but doing it manually will teach you more about Wakame-vdc.  Using the script  The script can be found here:  install_guide_demo_data.sh  It will perform all the steps explained below except reserving IP addresses. (which is optional)  You need to tell it about the network you want to start your instances in. Run the script without parameters to see how to use it.  After running the script and  optionally reserving ip addresses , skip over to the  Start Wakame-vdc  section.  Manual configuration  The different Wakame-vdc services require their own config files. Unfortunately they currently aren't automatically installed with the rpm packages. Until we have that fixed, you will have to copy them over manually.  sudo cp /opt/axsh/wakame-vdc/dcmgr/config/dcmgr.conf.example /etc/wakame-vdc/dcmgr.conf\n\nsudo cp /opt/axsh/wakame-vdc/dcmgr/config/hva.conf.example /etc/wakame-vdc/hva.conf\n\nsudo cp /opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/database.yml.example /etc/wakame-vdc/dcmgr_gui/database.yml\n\nsudo cp /opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/dcmgr_gui.yml.example /etc/wakame-vdc/dcmgr_gui/dcmgr_gui.yml\n\nsudo cp /opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/instance_spec.yml.example /etc/wakame-vdc/dcmgr_gui/instance_spec.yml\n\nsudo cp /opt/axsh/wakame-vdc/frontend/dcmgr_gui/config/load_balancer_spec.yml.example /etc/wakame-vdc/dcmgr_gui/load_balancer_spec.yml  Create the Wakame-vdc database  Wakame-vdc uses a  MySQL  database. Start MySQL and create the database.  sudo service mysqld start\nmysqladmin -uroot create wakame_dcmgr  We can use  Rake  to create the database tables. Wakame-vdc comes with its own ruby binary that includes Rake.  cd /opt/axsh/wakame-vdc/dcmgr\n/opt/axsh/wakame-vdc/ruby/bin/rake db:up  Register the HVA  As describe above, the HVA or host node is the part of Wakame-vdc that actually starts instances. Wakame-vdc can manage any number of these. The words HVA and host node will be used interchangeably in this guide.  Wakame-vdc recognises host nodes by their  node id . That is a unique id that  AMQP  uses to identify each service. We will assign the id  demo1  to our HVA.  Edit the file  /etc/default/vdc-hva  and uncomment the following line:  NODE_ID=demo1  Now our HVA process will start up with  demo1  as its  node id . Next we need to add a database entry to let Wakame-vdc know how much memory, CPU power and disk space it has available, etc.  We can use the  vdc-manage  cli to do this. Of course the parameters of this command will vary depending on the capacity of your HVA. Adjust them accordingly.  /opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage host add hva.demo1 \\\n   --uuid hn-demo1 \\\n   --display-name \"demo HVA 1\" \\\n   --cpu-cores 100 \\\n   --memory-size 10240 \\\n   --hypervisor openvz \\\n   --arch x86_64 \\\n   --disk-space 102400 \\\n   --force  Remarks:\n  * The  node id  would be  hva.demo1 . We set  demo1  in the above step but when the process starts, it is automatically prefixed by  hva .   Memory-size  and  cpu-cores  do not represent the actual memory size and CPU cores of the host node. They represent the amount of either to be offered to instances.   Setting  cpu-cores  to 100 means that you can start for example 100 instances with 1 CPU core each or in another example, 50 instances with 2 CPU cores each.   The  force  flag is set so we can register the host node even though Wakame-vdc can't currently see it through AMQP. Since we haven't started the Wakame-vdc services yet, it's only natural that it can't see it yet. It will once we start them.   Download and register a machine image  Of course we can't start any instances if we don't have a machine image to instantiate. For this guide we are just going to download a simple machine image containing Ubuntu 10.04 (Lucid Lynx).  Wakame-vdc's default directory for keeping images is  /var/lib/wakame-vdc/images . Create it.  sudo mkdir -p /var/lib/wakame-vdc/images  Now download the image in that directory.  cd /var/lib/wakame-vdc/images\nsudo curl -O http://dlc.wakame.axsh.jp.s3.amazonaws.com/demo/vmimage/ubuntu-lucid-kvm-md-32.raw.gz  The image should have the following md5 sum. We will need it when registering it in the database.  1f841b195e0fdfd4342709f77325ce29  ubuntu-lucid-kvm-md-32.raw.gz  Now we need to let Wakame-vdc know that it has a machine image to start instances from. First of all here's a brief explanation of how Wakame-vdc treats machine images. There are two terms we'll need to understand here.  Backup objects  and  machine images . A  backup object  is basically a hard drive image. A  machine image  is a backup object that's bootable. In case of a linux instance, the  machine image  would hold the root partition.  To register both the  backup object  and the related  machine image , we will again use the  vdc-manage  cli but since we are going to run more than one operation now, it's more efficient to call it without arguments. This will result in a special shell where we can run  vdc-manage  commands. This is more efficient because we only need to establish a connection to the database once and can then feed many commands through it.  /opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage  First of all we need to tell Wakame-vdc how we are storing these  backup objects . We are currently just keeping them on the local file system.  backupstorage add \\\n  --uuid bkst-local \\\n  --display-name \"local storage\" \\\n  --base-uri \"file:///var/lib/wakame-vdc/images/\" \\\n  --storage-type local \\\n  --description \"storage on the local filesystem\"  Now register the backup object and assign it to the local storage that we just made.  This image is compressed with gzip to save space. In order to properly manage its disk space usage, Wakame-vdc needs to know both the compressed size and uncompressed size of the image. These translate to the  size  and  allocation-size  options respectively.  backupobject add \\\n  --uuid bo-lucid5d \\\n  --display-name \"Ubuntu 10.04 (Lucid Lynx) root partition\" \\\n  --storage-id bkst-local \\\n  --object-key ubuntu-lucid-kvm-md-32.raw.gz \\\n  --size 149084 \\\n  --allocation-size 359940 \\\n  --container-format gz \\\n  --checksum 1f841b195e0fdfd4342709f77325ce29  Next we tell Wakame-vdc that this backup object is a machine image that we can start instances of.  image add local bo-lucid5d \\\n  --account-id a-shpoolxx \\\n  --uuid wmi-lucid5d \\\n  --root-device uuid:148bc5df-3fc5-4e93-8a16-7328907cb1c0 \\\n  --display-name \"Ubuntu 10.04 (Lucid Lynx)\"  Register a network  Wakame-vdc needs to know which network instances will be connected to. You can register more than one network and then decide which one to use when you start instances.  Remark:  As described above, this guide assumes that network to be  192.168.3.0/24 . Make sure to change these values if you intend to use another network.  network add \\\n  --uuid nw-demo1 \\\n  --ipv4-network 192.168.3.0 \\\n  --prefix 24 \\\n  --ipv4-gw 192.168.3.1 \\\n  --dns 8.8.8.8 \\\n  --account-id a-shpoolxx \\\n  --display-name \"demo network\"  Wakame-vdc is now aware of this network but it still doesn't know which IP addresses in it are available to assign to instances. Register a dhcp range.  network dhcp addrange nw-demo1 192.168.3.1 192.168.3.254  \nYou might be worried because the gateway is included in dhcp range. Don't be. Wakame-vdc is smart enough to know that it can't use that IP address.  If you have other IP addresses inside the dhcp range that can not be used by Wakame-vdc, you need to reserve them so Wakame-vdc knows these can't be used. For example in this guide we were using 192.168.3.100 as the host node's ip address and therefore it can not be used. You can reserve it with the following command. If you do not have any IP addresses that need to be reserved, just skip this step.  network reserve nw-demo1 --ipv4 192.168.3.100  Wakame-vdc needs to know which mac addresses are available to assign to instances.  macrange add 525400 1 ffffff --uuid mr-demomacs  Next, Wakame-vdc needs to know which bridge to attach its intances' virtual network interfaces (vnics) to, and which interface on that bridge is connected to the outside world. You do that by registering a  dc network .  network dc add public --uuid dcn-public --description \"the network instances are started in\"\nnetwork dc add-network-mode public securitygroup\nnetwork forward nw-demo1 public  We're done with vdc-manage. Exit its shell.  exit  Earlier in this guide we have set up a bridge named  br0  and it's connected to the outside world through a network interface  eth0 . If you are also using these names, you should be fine.  If  you are using other names, you need to go update  /etc/wakame-vdc/hva.conf . Find the following in that file and change it to match the names that you're using.  dc_network('public') {\n  bridge_type 'linux'\n  interface 'eth0'\n  bridge 'br0'\n}  Configure the GUI  The GUI is a rails application that requires its own database. Create it and initialize its tables using Rake.  mysqladmin -uroot create wakame_dcmgr_gui\ncd /opt/axsh/wakame-vdc/frontend/dcmgr_gui/\n/opt/axsh/wakame-vdc/ruby/bin/rake db:init  The GUI uses user/password authentication. Wakame-vdc's web API has no authentication so on a production environment, you'd want to show only the GUI to the outside world while keeping the web API on a private network.  We're going to be talking about  users  and  accounts  here. Their meanings are slightly different.    An account is where rights are assigned. An account will be allowed to start a certain amount of instances and own certain resources.    A user is a username/password combination that has access to one or more accounts. You will log into the Wakame-vdc GUI as a user and get access to the resources owned by any accounts your user is associated with.    Users and accounts share a many-to-many relation. A user can belong to many accounts and an account can belong to many users.  The GUI database has a cli called  gui-manage  which is similar to vdc-manage.  /opt/axsh/wakame-vdc/frontend/dcmgr_gui/bin/gui-manage  Let's use it to create an account for ourselves. This account with uuid  a-shpoolxx  is a special account that Wakame-vdc uses for certain shared resources.  account add --name default --uuid a-shpoolxx  Next we'll add a user. The  login-id  is the name we're going to use when logging into the GUI.  user add --name \"demo user\" --uuid u-demo --password demo --login-id demo  Now associate the user and the account.  user associate u-demo --account-ids a-shpoolxx  We're done with gui-manage. Exit the shell.  exit  Start Wakame-vdc  Start the rabbitmq server. Wakame-vdc's different processes use AMQP to communicate. Rabbitmq-server is the AMQP exchange managing all that traffic.  sudo service rabbitmq-server start  If you've been following this guide, MySQL should still be running. If it isn't running, start it.  sudo service mysqld start  After all this hard work we should be able to get Wakame-vdc up and running. Start the upstart jobs.  These 4 upstart jobs can be started in any order as long as  rabbitmq-server  and  mysqld  have been started first.  sudo start vdc-dcmgr\nsudo start vdc-collector\nsudo start vdc-hva\nsudo start vdc-webui  If everything went right, Wakame-vdc is now up and running. Start a web browser and surf to your machine's IP address on port 9000. If you're using the same IP address as this guide, that would be  192.168.3.100:9000 . Log in with user  demo  and password  demo .  The  lucid5d  image has password login through ssh enabled. After starting instances you are able to log in using username  ubuntu  and password  ubuntu . You are of course also able to log in using username  ubuntu  and a key pair registered with Wakame-vdc.  Check out the  basic usage guide  if you're not sure were to go from here.",
            "title": "Let's get started"
        },
        {
            "location": "/development/",
            "text": "Development guide\n\n\nIf you want try hacking away at the Wakame-vdc source code, this guide should be able to help you out a bit. The source can be found on \ngithub\n.\n\n\nYou can just clone it as you would any \ngit\n respository.\n\n\ngit clone https://github.com/axsh/wakame-vdc\n\n\n\nCode map\n\n\nNow that you know where the code is, let's see what we can tell you about how it's structured.\n\n\nThe main backend source code is in the \ndcmgr\n directory.\n\n\nThe file \ndcmgr/lib/dcmgr.rb\n provides a nice overview of the code. It shows the module and class structure.\n\n\nWebAPI\n\n\nThe WebAPI code uses \nSinatra\n and is in the \ndcmgr/lib/dcmgr/endpoints/12.03\n directory.\n\n\nHypervisor drivers\n\n\nThe code that actually starts instances is in the \ndcmgr/lib/dcmgr/drivers/hypervisor\n directory.\n\n\nScheduling\n\n\nAll decisions that need to be made in order to start instances (assignment of \nhost node\n, IP address, MAC address, etc.) are referred to as scheduling and are located in the \ndcmgr/lib/dcmgr/scheduler\n directory. The code that actually executes these schedulers can be found here: \ndcmgr/lib/dcmgr/node_modules/scheduler.rb\n\n\nSecurity Groups\n\n\nThe firewall (\nSecurity Groups\n) related code is located in the \ndcmgr/lib/dcmgr/edge_networking\n directory. This code is executed from the following file: \ndcmgr/lib/dcmgr/node_modules/service_netfilter.rb\n.\n\n\nThe \ndcmgr/lib/dcmgr/edge_networking/openflow\n directory is actually a leftover from an obsolete feature concerning virtual networks. That feature got split off and turned into \nOpenVNet\n. The directory is still there because \nthe NATbox\n uses \nOpenFlow\n to provide network address translation.\n\n\nAMQP messaging\n\n\nWakame-vdc uses an in-house developed framework that handles all the \nAMQP\n messaging. It's called Isono and can be found in its own \ngithub repository\n.\n\n\nThe classes that implement Isono can be found in the \ndcmgr/lib/dcmgr/node_modules\n and \ndcmgr/lib/dcmgr/rpc\n directories.\n\n\nDatabase access\n\n\nWe use \nSequel\n to handle database access. The model classes are in the \ndcmgr/lib/dcmgr/models\n directory.\n\n\nThe database schema is managed using \nSequel Migrations\n. The migration files are in \nconfig/db/migrations\n.\n\n\nGUI\n\n\nThe GUI is a \nRails\n application and is located in the \nfrontend/dcmgr_gui\n directory. There's also a not quite as pretty admin GUI available if you want to play around with it. \nfrontend/admin\n\n\nCLI (vdc-manage and gui-manage)\n\n\nBoth CLI's used by Wakame-vdc are implemented using \nThor\n.\n\n\nThe \nvdc-manage\n CLI is located in the \ndcmgr/lib/dcmgr/cli\n directory and is executed from \ndcmgr/bin/vdc-manage\n.\n\n\nThe \ngui-manage\n CLI can be found in \nfrontend/dcmgr_gui/lib/cli\n and is executed from \nfrontend/dcmgr_gui/bin/gui-manage\n.\n\n\nConfiguration files\n\n\nThe configuration files use an in-house developed framework called \nFuguta\n. Their definitions can be found in the \ndcmgr/lib/dcmgr/configurations\n directory. Examples of the configuration files themselves can be found here: \ndcmgr/config\n\n\nRPM packaging\n\n\nThe RPM packaging scripts are in the aptly named \nrpmbuild\n directory.\n\n\nDebian packaging\n\n\nYou might notice a \ndebian\n directory in the main repository. Even though the directory is there, Debian packaging is currently \nnot\n officially supported. Feel free to play around with the packaging info in this directory but don't expect it to work.\n\n\nMussel\n\n\nMussel is an API client and autotesting framework for Wakame-vdc written in bash. It can be found here: \nclient/mussel\n\n\nAutotesting\n\n\nThere are currently three autotest suites for Wakame-vdc.\n\n\nUnit tests using \nRSpec\n are here: \ndcmgr/spec\n\n\nIntegration tests using the Mussel framework are here: \nclient/mussel/test\n\n\nIntegration tests using \nRSpec\n are here: \nspec_integration\n\n\nInstance init scripts\n\n\nThe instances need to be made aware of meta-data that Wakame-vdc sets for them like IP address, hostname, etc. Scripts to do this are located here: \nwakame-init\n\n\nUpstart jobs\n\n\nThe upstart jobs that are used to start Wakame-vdc services are located here: \ncontrib/etc\n\n\nContributing code\n\n\nWe encourage you to send some of your code back to us. You can do so by using github's \nfork & pull\n method as described \nhere\n. You will need to have a github account.\n\n\nOnce you've made a pull request to us, we will run our automated test suite on it and review the code. We might ask you to make certain modifications before (and if) we finally merge your code into the main repository.",
            "title": "Development"
        },
        {
            "location": "/development/#development-guide",
            "text": "If you want try hacking away at the Wakame-vdc source code, this guide should be able to help you out a bit. The source can be found on  github .  You can just clone it as you would any  git  respository.  git clone https://github.com/axsh/wakame-vdc",
            "title": "Development guide"
        },
        {
            "location": "/development/#code-map",
            "text": "Now that you know where the code is, let's see what we can tell you about how it's structured.  The main backend source code is in the  dcmgr  directory.  The file  dcmgr/lib/dcmgr.rb  provides a nice overview of the code. It shows the module and class structure.  WebAPI  The WebAPI code uses  Sinatra  and is in the  dcmgr/lib/dcmgr/endpoints/12.03  directory.  Hypervisor drivers  The code that actually starts instances is in the  dcmgr/lib/dcmgr/drivers/hypervisor  directory.  Scheduling  All decisions that need to be made in order to start instances (assignment of  host node , IP address, MAC address, etc.) are referred to as scheduling and are located in the  dcmgr/lib/dcmgr/scheduler  directory. The code that actually executes these schedulers can be found here:  dcmgr/lib/dcmgr/node_modules/scheduler.rb  Security Groups  The firewall ( Security Groups ) related code is located in the  dcmgr/lib/dcmgr/edge_networking  directory. This code is executed from the following file:  dcmgr/lib/dcmgr/node_modules/service_netfilter.rb .  The  dcmgr/lib/dcmgr/edge_networking/openflow  directory is actually a leftover from an obsolete feature concerning virtual networks. That feature got split off and turned into  OpenVNet . The directory is still there because  the NATbox  uses  OpenFlow  to provide network address translation.  AMQP messaging  Wakame-vdc uses an in-house developed framework that handles all the  AMQP  messaging. It's called Isono and can be found in its own  github repository .  The classes that implement Isono can be found in the  dcmgr/lib/dcmgr/node_modules  and  dcmgr/lib/dcmgr/rpc  directories.  Database access  We use  Sequel  to handle database access. The model classes are in the  dcmgr/lib/dcmgr/models  directory.  The database schema is managed using  Sequel Migrations . The migration files are in  config/db/migrations .  GUI  The GUI is a  Rails  application and is located in the  frontend/dcmgr_gui  directory. There's also a not quite as pretty admin GUI available if you want to play around with it.  frontend/admin  CLI (vdc-manage and gui-manage)  Both CLI's used by Wakame-vdc are implemented using  Thor .  The  vdc-manage  CLI is located in the  dcmgr/lib/dcmgr/cli  directory and is executed from  dcmgr/bin/vdc-manage .  The  gui-manage  CLI can be found in  frontend/dcmgr_gui/lib/cli  and is executed from  frontend/dcmgr_gui/bin/gui-manage .  Configuration files  The configuration files use an in-house developed framework called  Fuguta . Their definitions can be found in the  dcmgr/lib/dcmgr/configurations  directory. Examples of the configuration files themselves can be found here:  dcmgr/config  RPM packaging  The RPM packaging scripts are in the aptly named  rpmbuild  directory.  Debian packaging  You might notice a  debian  directory in the main repository. Even though the directory is there, Debian packaging is currently  not  officially supported. Feel free to play around with the packaging info in this directory but don't expect it to work.  Mussel  Mussel is an API client and autotesting framework for Wakame-vdc written in bash. It can be found here:  client/mussel  Autotesting  There are currently three autotest suites for Wakame-vdc.  Unit tests using  RSpec  are here:  dcmgr/spec  Integration tests using the Mussel framework are here:  client/mussel/test  Integration tests using  RSpec  are here:  spec_integration  Instance init scripts  The instances need to be made aware of meta-data that Wakame-vdc sets for them like IP address, hostname, etc. Scripts to do this are located here:  wakame-init  Upstart jobs  The upstart jobs that are used to start Wakame-vdc services are located here:  contrib/etc",
            "title": "Code map"
        },
        {
            "location": "/development/#contributing-code",
            "text": "We encourage you to send some of your code back to us. You can do so by using github's  fork & pull  method as described  here . You will need to have a github account.  Once you've made a pull request to us, we will run our automated test suite on it and review the code. We might ask you to make certain modifications before (and if) we finally merge your code into the main repository.",
            "title": "Contributing code"
        },
        {
            "location": "/usage/",
            "text": "What is covered here?\n\n\nWe are going to walk you through Wakame-vdc's most basic function which is starting instances. Instance is the term that Wakame-vdc uses for a virtual server. The reasoning behind this is that we're not booting virtual machine images directly. Instead we're booting copies of it. We're instantiating a virtual machine image.\n\n\nAt the end of this guide, we'll also tell you how to terminate started instances.\n\n\nPrerequisites\n\n\nA working Wakame-vdc environment with at least one machine image registered. If you've followed the \ninstallation guide\n or the \nVirtualBox demo image guide\n, you already have that.\n\n\nGuide\n\n\nStarting instances\n\n\nSurf to the Wakame-vdc gui and log in. By default the GUI runs on port \n9000\n. Its ip address will be the one of whatever machine has installed the \nwakame-vdc-webui-vmapp-config\n package. If you have followed either of the guides mentioned in prerequisites, you can log in using username \ndemo\n and password \ndemo\n.\n\n\n\n\nBefore we can start an instance there are two things we need. An \nRSA\n \nkey pair\n and a \nsecurity group\n. The key pair will be used to log into the instance through \nSSH\n. The security group will act as a firewall.\n\n\nLet's take care of the key pair first. Click on \nKey Pairs\n in the menu on the left.\n\n\n\n\nClick on \nCreate Key Pair\n.\n\n\n\n\nIf you already have your own RSA key, you can just register your public key. If you leave the public key field blank, Wakame-vdc will generate a new key for you. Let's do that now.\n\n\nAfter you've clicked on \nCreate\n, Wakame-vdc will generate a new RSA key pair and offer the private key for download. On a production environment, this key would be very sensitive information. Make sure to use \nhttps\n when running this on a production server.\n\n\nWe're going to need this private key later so remember where you saved it. The private key will \nnot\n be stored by Wakame-vdc in any way. If you accidentally delete it, it's gone forever.\n\n\nFill in a name for your key and click on \nCreate\n.\n\n\n\n\nIf everything went correctly, we should now be able to see our key pair in the list.\n\n\nNext we will create a security group. Click on \nSecurity Groups\n in the menu on the left.\n\n\n\n\nClick on \nCreate Security Group\n on the top of the page.\n\n\n\n\nBy default \nall\n incoming traffic to instances is blocked by Wakame-vdc. We need to open port 22 so we will be able to log into our instance through ssh later. Fill in a name for your security group and add a rule to open up tcp port 22. Once that's done, click on \nCreate\n.\n\n\n\n\nAs was the case for key pairs, we should now be able to see our security group in the list.\n\n\nNow it's time to actually start an instance. Click on \nMachine Images\n in the menu on the left.\n\n\n\n\nThis guide is written based on an image that was set up using the \ninstallation guide\n. Therefore we have one machine image \nwmi-lucid5d\n. Your environment might have different machine images registered but the operations will be the same. Select any image from the list and click on \nLaunch Instance\n.\n\n\n\n\nThere's a lot of information on the \nLaunch Instance\n dialog. We are only going to fill in the bare essentials needed to launch an instance.\n\n\n\n\n\n\nInstance Name\n (a human readable name for the instance)\n\n\n\n\n\n\nSSH Key Pair\n (the RSA key pair we created before and are going to use to log into the instance)\n\n\n\n\n\n\nSecurity Groups\n (the security group we created before which will open tcp port 22)\n\n\n\n\n\n\neth0\n (this will give the instance a virtual network interface and connect it to a network)\n\n\n\n\n\n\nOnce all of these are filled in, click on \nLaunch\n.\n\n\n\n\nYou'll be taken back to the \nMachine Images\n page. Don't worry if you don't see your instance here. Instances are shown on their own page. Click on \nInstances\n in the menu on the left.\n\n\n\n\nYou should be able to see your instance on this page. Under \nState\n it will say either \nrunning\n or \ninitializing\n. If it's the latter then just wait for a while and refresh the page. It should get to the \nrunning\n state eventually. If it says \nterminated\n, then something went wrong. Make sure you've followed the steps in this guide correctly and check out the logs in the \n/var/log/wakame-vdc\n directory for clues.\n\n\nOnce your instance has reached state \nrunning\n, it might still take a little while before you can ssh into it. The \nrunning\n state means that Wakame-vdc has started your instance. It's equivalent to pressing the power button on a physical server. The instance is turned on but the OS still needs a little time to boot.\n\n\nYou will also see the ip address that has been assigned to your instance. On the screenshot below that would be \n192.168.3.2\n.\n\n\n\n\nUsing instances\n\n\nAt this point we're done with the Wakame-vdc GUI. That instance is now a server running in a network. We're going to log into it just like you'd log into any other server: using SSH. Remember how we downloaded the RSA private key that we created earlier? This is where we'll use it. On a Linux machine you'd run this command.\n\n\nssh -i /path/to/your/private/key -l username ip-of-your-instance\n\n\n\nIf we fill in the values used in this guide, we get the following command:\n\n\nssh -i ~/Downloads/ssh-tziiy9n6.pem -l ubuntu 192.168.3.2\n\n\n\nThat's it. You have now started an instance and can start using it. Feel free to play around and start any number of instances.\n\n\nTerminating instances\n\n\nOnce you've decided you don't need an instance any more, you can terminate it. Before you do so, you need to be absolutely sure that you don't need this instance any more. Once an instance is terminated, it is irrevocably deleted. It will not be possible to recover it!\n\n\nTo terminate an instance, select it from the list and click on \nSelect an Action\n.\n\n\n\n\nNow click on \nTerminate\n.\n\n\n\n\nA dialog pops up asking for confirmation. Confirm that this is indeed the instance that you want to terminate and click on \nTerminate\n.\n\n\n\n\nYou'll be taken back to the instances list. You'll see the state of your instance is now \nshutting down\n. If you wait a few seconds and refresh it will have changed to \nterminated\n. The instance is now gone forever.\n\n\n\n\nThat concludes this basic Wakame-vdc usage guide. We hope everything went smoothly and if you run into any problems, don't hesitate to contact us on the \nWakame Users Group\n. We'll do our best to help you resolve any issues you might run into.",
            "title": "Basics"
        },
        {
            "location": "/usage/#what-is-covered-here",
            "text": "We are going to walk you through Wakame-vdc's most basic function which is starting instances. Instance is the term that Wakame-vdc uses for a virtual server. The reasoning behind this is that we're not booting virtual machine images directly. Instead we're booting copies of it. We're instantiating a virtual machine image.  At the end of this guide, we'll also tell you how to terminate started instances.",
            "title": "What is covered here?"
        },
        {
            "location": "/usage/#prerequisites",
            "text": "A working Wakame-vdc environment with at least one machine image registered. If you've followed the  installation guide  or the  VirtualBox demo image guide , you already have that.",
            "title": "Prerequisites"
        },
        {
            "location": "/usage/#guide",
            "text": "Starting instances  Surf to the Wakame-vdc gui and log in. By default the GUI runs on port  9000 . Its ip address will be the one of whatever machine has installed the  wakame-vdc-webui-vmapp-config  package. If you have followed either of the guides mentioned in prerequisites, you can log in using username  demo  and password  demo .   Before we can start an instance there are two things we need. An  RSA   key pair  and a  security group . The key pair will be used to log into the instance through  SSH . The security group will act as a firewall.  Let's take care of the key pair first. Click on  Key Pairs  in the menu on the left.   Click on  Create Key Pair .   If you already have your own RSA key, you can just register your public key. If you leave the public key field blank, Wakame-vdc will generate a new key for you. Let's do that now.  After you've clicked on  Create , Wakame-vdc will generate a new RSA key pair and offer the private key for download. On a production environment, this key would be very sensitive information. Make sure to use  https  when running this on a production server.  We're going to need this private key later so remember where you saved it. The private key will  not  be stored by Wakame-vdc in any way. If you accidentally delete it, it's gone forever.  Fill in a name for your key and click on  Create .   If everything went correctly, we should now be able to see our key pair in the list.  Next we will create a security group. Click on  Security Groups  in the menu on the left.   Click on  Create Security Group  on the top of the page.   By default  all  incoming traffic to instances is blocked by Wakame-vdc. We need to open port 22 so we will be able to log into our instance through ssh later. Fill in a name for your security group and add a rule to open up tcp port 22. Once that's done, click on  Create .   As was the case for key pairs, we should now be able to see our security group in the list.  Now it's time to actually start an instance. Click on  Machine Images  in the menu on the left.   This guide is written based on an image that was set up using the  installation guide . Therefore we have one machine image  wmi-lucid5d . Your environment might have different machine images registered but the operations will be the same. Select any image from the list and click on  Launch Instance .   There's a lot of information on the  Launch Instance  dialog. We are only going to fill in the bare essentials needed to launch an instance.    Instance Name  (a human readable name for the instance)    SSH Key Pair  (the RSA key pair we created before and are going to use to log into the instance)    Security Groups  (the security group we created before which will open tcp port 22)    eth0  (this will give the instance a virtual network interface and connect it to a network)    Once all of these are filled in, click on  Launch .   You'll be taken back to the  Machine Images  page. Don't worry if you don't see your instance here. Instances are shown on their own page. Click on  Instances  in the menu on the left.   You should be able to see your instance on this page. Under  State  it will say either  running  or  initializing . If it's the latter then just wait for a while and refresh the page. It should get to the  running  state eventually. If it says  terminated , then something went wrong. Make sure you've followed the steps in this guide correctly and check out the logs in the  /var/log/wakame-vdc  directory for clues.  Once your instance has reached state  running , it might still take a little while before you can ssh into it. The  running  state means that Wakame-vdc has started your instance. It's equivalent to pressing the power button on a physical server. The instance is turned on but the OS still needs a little time to boot.  You will also see the ip address that has been assigned to your instance. On the screenshot below that would be  192.168.3.2 .   Using instances  At this point we're done with the Wakame-vdc GUI. That instance is now a server running in a network. We're going to log into it just like you'd log into any other server: using SSH. Remember how we downloaded the RSA private key that we created earlier? This is where we'll use it. On a Linux machine you'd run this command.  ssh -i /path/to/your/private/key -l username ip-of-your-instance  If we fill in the values used in this guide, we get the following command:  ssh -i ~/Downloads/ssh-tziiy9n6.pem -l ubuntu 192.168.3.2  That's it. You have now started an instance and can start using it. Feel free to play around and start any number of instances.  Terminating instances  Once you've decided you don't need an instance any more, you can terminate it. Before you do so, you need to be absolutely sure that you don't need this instance any more. Once an instance is terminated, it is irrevocably deleted. It will not be possible to recover it!  To terminate an instance, select it from the list and click on  Select an Action .   Now click on  Terminate .   A dialog pops up asking for confirmation. Confirm that this is indeed the instance that you want to terminate and click on  Terminate .   You'll be taken back to the instances list. You'll see the state of your instance is now  shutting down . If you wait a few seconds and refresh it will have changed to  terminated . The instance is now gone forever.   That concludes this basic Wakame-vdc usage guide. We hope everything went smoothly and if you run into any problems, don't hesitate to contact us on the  Wakame Users Group . We'll do our best to help you resolve any issues you might run into.",
            "title": "Guide"
        },
        {
            "location": "/usage/custom-machine-images/",
            "text": "Overview\n\n\nAlthough there are a variety of pre-built machine images for Wakame-vdc, in\nmost cases it will be necessary to install extra software and do other\nmiscellaneous setup after starting an \ninstance\n.  To reduce this setup\neffort, in some cases it makes sense for users to create their own\ncustom \nmachine images\n.  Then by simply starting an instance in Wakame-vdc, it is\npossible to have a virtual machine up and running that is already\nperfectly set up.  All necessary software and services, for whatever\npurpose, can be \"ready-to-go\".\n\n\nThere are five basic steps for creating and using a custom machine image with Wakame-vdc:\n\n\n\n\n\n\nInstall an OS into a bootable disk or directory structure.\n\n\n\n\n\n\nSpecialize the OS installation for the intended purpose.\n\n\n\n\n\n\nSpecialize the OS installation for Wakame-vdc.\n\n\n\n\n\n\nPackage it all into one machine image file.\n\n\n\n\n\n\nRegister this machine image file with Wakame-vdc.\n\n\n\n\n\n\nWakame-vdc supports various virtualization technologies (KVM, OpenVZ,\nand LXC) and methods of packaging (tar, gzip, disk partitions, etc.),\nand the details for doing the above steps depends on which are chosen.\nBelow we will explain the steps assuming OpenVZ virtualization and gz\npackaging, and to make things a little more interesting, set up the\nmachine image to automatically start up a web server with a single\nstatic web page to show.  The steps for other combinations are\nsimilar, but differ in subtle ways that will be documented later.\n\n\nStep 1: Install an OS into a bootable disk or directory structure\n\n\nFor OpenVZ, specialized techniques are required to install an OS, so\nthe recommended procedure is to use one of the \nprecreated templates\n\nthat can be found at the \nOpenVZ wiki\n.  Minimal\ninstallations of the major Linux distributions are available.\n\n\nStep 2: Specialize the OS installation for the intended purpose\n\n\nThe most straightforward way to install and configure the installed OS\ndistribution is from inside OpenVZ itself.  An environment created by\nfollowing the \ninstallation guide\n or the \nVirtualBox\ndemo image guide\n provides\nenough OpenVZ functionality to do this.\n\n\nAs an example, running\nfollowing shell commands in a VM booted with the demo image will\ndownload a minimal \"template cache\" for CentOS and specialize it by installing web server\nsoftware.  For an example of miscellaneous configuration, the shell commands\ncreate a top Web page and set up the web service to automatically start when the\nmachine image is instantiated.\n\n\nThe first few commands log into the demo VM and download a template image:\n\n\nssh centos@a.b.c.d  # where a.b.c.d is the demo VM's IP address\n[centos@wakame-vdc-1box ~]$ sudo su\n[root@wakame-vdc-1box centos]$ cd /vz/template/cache\n[root@wakame-vdc-1box cache]$ wget http://download.openvz.org/template/precreated/centos-6-x86_64-minimal.tar.gz\n\n\n\n\nNext, an OpenVZ container based on this image is started.\nNote that the 101 that appears many times below can be any number that\nis not in use by OpenVZ.\n\n\n[root@wakame-vdc-1box cache]$ vzctl create 101 --ostemplate centos-6-x86_64-minimal --ipadd a.b.c.vv --hostname localhost\n[root@wakame-vdc-1box cache]$ vzctl set 101 --nameserver 8.8.8.8 --save\n[root@wakame-vdc-1box cache]$ vzctl start 101\n\n\n\n\nNow we can go inside the container and specialize it by installing and\nconfiguring software.\n\n\n[root@wakame-vdc-1box cache]$ vzctl enter 101\n[root@localhost /]$ yum install httpd\n[root@localhost /]$ echo \"<html>An Example top web page.</html>\" >/var/www/html/index.html\n[root@localhost /]$ service httpd start\n[root@localhost /]$ chkconfig httpd on\n\n\n\n\nStep 3: Specialize the OS installation for Wakame-vdc\n\n\nInsert the wakame-init script and run it from /etc/rc.local:\n\n\nNote: This step is necessary so that Wakame-vdc can do last-minute\nspecialization that is necessary when each instance is booted.  For\nexample, the wakame-init script sets up network addresses and routing\nand installs ssh keys.  It also ensures that instances can access\ninformation from special \nmeta-data\n storage.\nOne use of this storage is to allow scripts inside an instance to do\nadditional specialization based on\n\nuser-data\n.  Users can enter this data\non-the-fly while starting an instance, and scripts can read it from a\nspecial file at \n/metadata/user-data\n.\n\n\ncurl -o /etc/yum.repos.d/wakame-vdc-stable.repo -R https://raw.githubusercontent.com/axsh/wakame-vdc/master/rpmbuild/yum_repositories/wakame-vdc-stable.repo\n\nyum install -y wakame-init\n\n\n\n\nClear shell history:\n\n\nNote: This step is optional.\n\n\nrm /home/*/.bash_history /root/.bash_history\n\n\n\n\nRemove ssh host keys:\n\n\nNote: This step is optional but recommended so that different\ninstances appear as different ssh hosts.\n\n\nrm /etc/ssh/ssh_host*\n\n\n\n\nRemove net rules file so eth0 doesn't become eth1 at start:\n\n\nNote: This step is not necessary for OpenVZ, but will not cause any\nproblems.  In fact, most of the OpenVZ precreated template caches do\nnot have this file.\n\n\nrm /etc/udev/rules.d/70-persistent-net.rules\n\n\n\n\nStep 4: Package it all into one machine image file\n\n\nExit the OpenVZ container.\n\n\n[root@localhost etc]$ exit\n\n\n\n\nNow we are back at the demo box prompt. The following instructions are adapted from\nthe \nOpenVZ wiki\n:\n\n\n[root@wakame-vdc-1box cache]$ vzctl stop 101\n[root@wakame-vdc-1box cache]$ vzctl set 101 --ipdel all --save\n[root@wakame-vdc-1box cache]$ cd /vz/private/101\n[root@wakame-vdc-1box 101]$ tar  --numeric-owner -czf /vz/template/cache/new-custom-image-temp.tar.gz .\n[root@wakame-vdc-1box 101]$ cd ..\n[root@wakame-vdc-1box private]$ vzctl destroy 101\n\n\n\n\nWakame-vdc's preferred method of packaging machine images is inside of\npartitioned VM images files. The following commands show one way to\ncreate such an image file and store the new customized OS distribution\ninside it using standard GNU/Linux commands.\n\n\nThe first commands change to the \n/var/lib/wakame-vdc/images/\n\ndirectory and create a 10G empty image there. Other directories will\nwork. The advantage of choosing this directory is so that the image\nfile will already be in the right place for testing with Wakame-vdc.\n\n\n[root@wakame-vdc-1box private]$ cd /var/lib/wakame-vdc/images/\n[root@wakame-vdc-1box images]$ truncate -s 10G wakame-vdc-custom-image.raw\n\n\n\n\nThe next commands add a partition table to the image, and then make\nthe first partition be an ext2 partition (i.e. which in this context,\nmeans any Linux partition) that takes up the whole image, except\nthe first 63 sectors.  The new unformatted partition is then mounted\non a loop device.\n\n\n[root@wakame-vdc-1box images]$ parted wakame-vdc-custom-image.raw mklabel msdos\n[root@wakame-vdc-1box images]$ parted --script -- wakame-vdc-custom-image.raw mkpart primary ext2 63s -0\n[root@wakame-vdc-1box images]$ kpartx -va wakame-vdc-custom-image.raw\n\n\n\n\nNext, the mounted partition is formatted and then mounted.  Note:\nBefore doing this next command, be sure the output from previous\nkpartx command says that the partition was mounted at loop0p1, and if\nnot adjust the parameter accordingly.\n\n\n[root@wakame-vdc-1box images]$ mkfs.ext4 -F -E lazy_itable_init=1 -L root /dev/mapper/loop0p1\n[root@wakame-vdc-1box images]$ tune2fs -o acl /dev/mapper/loop0p1\n[root@wakame-vdc-1box images]$ mkdir tmp-mount\n[root@wakame-vdc-1box images]$ mount /dev/mapper/loop0p1 tmp-mount/\n\n\n\n\nNext, we copy the OpenVZ directory contents into the file system and\nthen unmount the file system.\n\n\n[root@wakame-vdc-1box images]$ cd tmp-mount/\n[root@wakame-vdc-1box tmp-mount]$ tar xzf /vz/template/cache/new-custom-image-temp.tar.gz\n[root@wakame-vdc-1box tmp-mount]$ cd ..\n[root@wakame-vdc-1box images]$ umount tmp-mount/\n[root@wakame-vdc-1box images]$ rmdir tmp-mount/\n\n\n\n\nBecause in some use cases disk images can have multiple partitions,\nWakame-vdc needs to know the UUID of the formatted disk partition to\nreliably identify it when booting instances.  This UUID needs to be\nfound before the partition is removed from the loop device, so we\ndetermine it first and then release the loop device.\n\n\n[root@wakame-vdc-1box images]$ blkid -o export /dev/mapper/loop0p1 | tee /tmp/remember.uuid-etc\n[root@wakame-vdc-1box images]$ kpartx -vd wakame-vdc-custom-image.raw\n\n\n\n\nBefore compressing the machine image, remember its size.\n\n\n[root@wakame-vdc-1box images]$ ls -l wakame-vdc-custom-image.raw | awk '{print $5}' | tee /tmp/remember.size\n\n\n\n\nFinally, compress the image and remember the compressed size and the checksum of the compressed machine image.\n\n\n[root@wakame-vdc-1box images]$ gzip wakame-vdc-custom-image.raw\n[root@wakame-vdc-1box images]$ ls -l wakame-vdc-custom-image.raw.gz | awk '{print $5}' | tee /tmp/remember.alloc_size\n[root@wakame-vdc-1box images]$ md5sum /var/lib/wakame-vdc/images/wakame-vdc-custom-image.raw.gz | head -c 32 | tee /tmp/remember.md5\n\n\n\n\nStep 5: Register this machine image file with Wakame-vdc\n\n\nFirst, move the new machine image to Wakame-vdc's directory for keeping\nimages.  (If the machine image was created by the above steps, it might\nalready be there.)\n\n\nmv wakame-vdc-custom-image.raw.gz /var/lib/wakame-vdc/images\n\n\n\n\nRegistering the machine image file requires two vdc-manage commands.\nThe first registers the file as a \nbackup object\n and assigns it to a\n\nbackup storage\n.  For example, to\nregister the machine image created above into \nbackup storage\n named \nbkst-local\n, the\nfollowing command could be used:\n\n\n/opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage backupobject add \\\n  --uuid bo-customimage \\\n  --display-name \"New image with web server and one static page\" \\\n  --storage-id bkst-local \\\n  --object-key wakame-vdc-custom-image.raw.gz \\\n  --size $(cat /tmp/remember.size) \\\n  --allocation-size $(cat /tmp/remember.alloc_size) \\\n  --container-format gz \\\n  --checksum $(cat /tmp/remember.md5)\n\n\n\n\nThe second vdc-manage command tells Wakame-vdc that this \nbackup object\n\nis a machine image that we can start instances of.\n\n\n/opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage image add local bo-customimage \\\n  --account-id a-shpoolxx \\\n  --uuid wmi-customimage \\\n  --root-device uuid:$(source /tmp/remember.uuid-etc ; echo $UUID) \\\n  --display-name \"New image with web server and one static page\"\n\n\n\n\nNote that the $() expressions here supply the command with necessary\ndetails about the machine image, assuming it was collected as in the example\nsteps above.  The names \nbkst-local\n and \na-shpoolxx\n will work if\nyour are installing into an environment that was created by following\nthe \nWakame-vdc install guide\n.  The correct values for\nother situations can be typed directly into the command line.\n\n\nUsing and testing the new image\n\n\nIt should now be possible to start an instance from the machine image\nby following the instructions in the \nbasic usage guide\n.  The only necessary modification to these instructions\nis to use your new image name (such as \ncustomimage\n in the example above) instead of lucid5d.\nYou can find the IP address of your instance from the \"Instances\" User Interface screen.\n\n\nIf your image came from the instructions on this page, you can confirm that everything\nworks by doing the following:\n\n\n\n\nAdd the line \"tcp:80,80,ip4:0.0.0.0\" to the security group.\n\n\nPoint a web browser to the instance's IP address.\n\n\n\n\nThe web browser should now be displaying the text: \"An Example top web page.\"",
            "title": "Custom Machine Images"
        },
        {
            "location": "/usage/custom-machine-images/#overview",
            "text": "Although there are a variety of pre-built machine images for Wakame-vdc, in\nmost cases it will be necessary to install extra software and do other\nmiscellaneous setup after starting an  instance .  To reduce this setup\neffort, in some cases it makes sense for users to create their own\ncustom  machine images .  Then by simply starting an instance in Wakame-vdc, it is\npossible to have a virtual machine up and running that is already\nperfectly set up.  All necessary software and services, for whatever\npurpose, can be \"ready-to-go\".  There are five basic steps for creating and using a custom machine image with Wakame-vdc:    Install an OS into a bootable disk or directory structure.    Specialize the OS installation for the intended purpose.    Specialize the OS installation for Wakame-vdc.    Package it all into one machine image file.    Register this machine image file with Wakame-vdc.    Wakame-vdc supports various virtualization technologies (KVM, OpenVZ,\nand LXC) and methods of packaging (tar, gzip, disk partitions, etc.),\nand the details for doing the above steps depends on which are chosen.\nBelow we will explain the steps assuming OpenVZ virtualization and gz\npackaging, and to make things a little more interesting, set up the\nmachine image to automatically start up a web server with a single\nstatic web page to show.  The steps for other combinations are\nsimilar, but differ in subtle ways that will be documented later.  Step 1: Install an OS into a bootable disk or directory structure  For OpenVZ, specialized techniques are required to install an OS, so\nthe recommended procedure is to use one of the  precreated templates \nthat can be found at the  OpenVZ wiki .  Minimal\ninstallations of the major Linux distributions are available.  Step 2: Specialize the OS installation for the intended purpose  The most straightforward way to install and configure the installed OS\ndistribution is from inside OpenVZ itself.  An environment created by\nfollowing the  installation guide  or the  VirtualBox\ndemo image guide  provides\nenough OpenVZ functionality to do this.  As an example, running\nfollowing shell commands in a VM booted with the demo image will\ndownload a minimal \"template cache\" for CentOS and specialize it by installing web server\nsoftware.  For an example of miscellaneous configuration, the shell commands\ncreate a top Web page and set up the web service to automatically start when the\nmachine image is instantiated.  The first few commands log into the demo VM and download a template image:  ssh centos@a.b.c.d  # where a.b.c.d is the demo VM's IP address\n[centos@wakame-vdc-1box ~]$ sudo su\n[root@wakame-vdc-1box centos]$ cd /vz/template/cache\n[root@wakame-vdc-1box cache]$ wget http://download.openvz.org/template/precreated/centos-6-x86_64-minimal.tar.gz  Next, an OpenVZ container based on this image is started.\nNote that the 101 that appears many times below can be any number that\nis not in use by OpenVZ.  [root@wakame-vdc-1box cache]$ vzctl create 101 --ostemplate centos-6-x86_64-minimal --ipadd a.b.c.vv --hostname localhost\n[root@wakame-vdc-1box cache]$ vzctl set 101 --nameserver 8.8.8.8 --save\n[root@wakame-vdc-1box cache]$ vzctl start 101  Now we can go inside the container and specialize it by installing and\nconfiguring software.  [root@wakame-vdc-1box cache]$ vzctl enter 101\n[root@localhost /]$ yum install httpd\n[root@localhost /]$ echo \"<html>An Example top web page.</html>\" >/var/www/html/index.html\n[root@localhost /]$ service httpd start\n[root@localhost /]$ chkconfig httpd on  Step 3: Specialize the OS installation for Wakame-vdc  Insert the wakame-init script and run it from /etc/rc.local:  Note: This step is necessary so that Wakame-vdc can do last-minute\nspecialization that is necessary when each instance is booted.  For\nexample, the wakame-init script sets up network addresses and routing\nand installs ssh keys.  It also ensures that instances can access\ninformation from special  meta-data  storage.\nOne use of this storage is to allow scripts inside an instance to do\nadditional specialization based on user-data .  Users can enter this data\non-the-fly while starting an instance, and scripts can read it from a\nspecial file at  /metadata/user-data .  curl -o /etc/yum.repos.d/wakame-vdc-stable.repo -R https://raw.githubusercontent.com/axsh/wakame-vdc/master/rpmbuild/yum_repositories/wakame-vdc-stable.repo\n\nyum install -y wakame-init  Clear shell history:  Note: This step is optional.  rm /home/*/.bash_history /root/.bash_history  Remove ssh host keys:  Note: This step is optional but recommended so that different\ninstances appear as different ssh hosts.  rm /etc/ssh/ssh_host*  Remove net rules file so eth0 doesn't become eth1 at start:  Note: This step is not necessary for OpenVZ, but will not cause any\nproblems.  In fact, most of the OpenVZ precreated template caches do\nnot have this file.  rm /etc/udev/rules.d/70-persistent-net.rules  Step 4: Package it all into one machine image file  Exit the OpenVZ container.  [root@localhost etc]$ exit  Now we are back at the demo box prompt. The following instructions are adapted from\nthe  OpenVZ wiki :  [root@wakame-vdc-1box cache]$ vzctl stop 101\n[root@wakame-vdc-1box cache]$ vzctl set 101 --ipdel all --save\n[root@wakame-vdc-1box cache]$ cd /vz/private/101\n[root@wakame-vdc-1box 101]$ tar  --numeric-owner -czf /vz/template/cache/new-custom-image-temp.tar.gz .\n[root@wakame-vdc-1box 101]$ cd ..\n[root@wakame-vdc-1box private]$ vzctl destroy 101  Wakame-vdc's preferred method of packaging machine images is inside of\npartitioned VM images files. The following commands show one way to\ncreate such an image file and store the new customized OS distribution\ninside it using standard GNU/Linux commands.  The first commands change to the  /var/lib/wakame-vdc/images/ \ndirectory and create a 10G empty image there. Other directories will\nwork. The advantage of choosing this directory is so that the image\nfile will already be in the right place for testing with Wakame-vdc.  [root@wakame-vdc-1box private]$ cd /var/lib/wakame-vdc/images/\n[root@wakame-vdc-1box images]$ truncate -s 10G wakame-vdc-custom-image.raw  The next commands add a partition table to the image, and then make\nthe first partition be an ext2 partition (i.e. which in this context,\nmeans any Linux partition) that takes up the whole image, except\nthe first 63 sectors.  The new unformatted partition is then mounted\non a loop device.  [root@wakame-vdc-1box images]$ parted wakame-vdc-custom-image.raw mklabel msdos\n[root@wakame-vdc-1box images]$ parted --script -- wakame-vdc-custom-image.raw mkpart primary ext2 63s -0\n[root@wakame-vdc-1box images]$ kpartx -va wakame-vdc-custom-image.raw  Next, the mounted partition is formatted and then mounted.  Note:\nBefore doing this next command, be sure the output from previous\nkpartx command says that the partition was mounted at loop0p1, and if\nnot adjust the parameter accordingly.  [root@wakame-vdc-1box images]$ mkfs.ext4 -F -E lazy_itable_init=1 -L root /dev/mapper/loop0p1\n[root@wakame-vdc-1box images]$ tune2fs -o acl /dev/mapper/loop0p1\n[root@wakame-vdc-1box images]$ mkdir tmp-mount\n[root@wakame-vdc-1box images]$ mount /dev/mapper/loop0p1 tmp-mount/  Next, we copy the OpenVZ directory contents into the file system and\nthen unmount the file system.  [root@wakame-vdc-1box images]$ cd tmp-mount/\n[root@wakame-vdc-1box tmp-mount]$ tar xzf /vz/template/cache/new-custom-image-temp.tar.gz\n[root@wakame-vdc-1box tmp-mount]$ cd ..\n[root@wakame-vdc-1box images]$ umount tmp-mount/\n[root@wakame-vdc-1box images]$ rmdir tmp-mount/  Because in some use cases disk images can have multiple partitions,\nWakame-vdc needs to know the UUID of the formatted disk partition to\nreliably identify it when booting instances.  This UUID needs to be\nfound before the partition is removed from the loop device, so we\ndetermine it first and then release the loop device.  [root@wakame-vdc-1box images]$ blkid -o export /dev/mapper/loop0p1 | tee /tmp/remember.uuid-etc\n[root@wakame-vdc-1box images]$ kpartx -vd wakame-vdc-custom-image.raw  Before compressing the machine image, remember its size.  [root@wakame-vdc-1box images]$ ls -l wakame-vdc-custom-image.raw | awk '{print $5}' | tee /tmp/remember.size  Finally, compress the image and remember the compressed size and the checksum of the compressed machine image.  [root@wakame-vdc-1box images]$ gzip wakame-vdc-custom-image.raw\n[root@wakame-vdc-1box images]$ ls -l wakame-vdc-custom-image.raw.gz | awk '{print $5}' | tee /tmp/remember.alloc_size\n[root@wakame-vdc-1box images]$ md5sum /var/lib/wakame-vdc/images/wakame-vdc-custom-image.raw.gz | head -c 32 | tee /tmp/remember.md5  Step 5: Register this machine image file with Wakame-vdc  First, move the new machine image to Wakame-vdc's directory for keeping\nimages.  (If the machine image was created by the above steps, it might\nalready be there.)  mv wakame-vdc-custom-image.raw.gz /var/lib/wakame-vdc/images  Registering the machine image file requires two vdc-manage commands.\nThe first registers the file as a  backup object  and assigns it to a backup storage .  For example, to\nregister the machine image created above into  backup storage  named  bkst-local , the\nfollowing command could be used:  /opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage backupobject add \\\n  --uuid bo-customimage \\\n  --display-name \"New image with web server and one static page\" \\\n  --storage-id bkst-local \\\n  --object-key wakame-vdc-custom-image.raw.gz \\\n  --size $(cat /tmp/remember.size) \\\n  --allocation-size $(cat /tmp/remember.alloc_size) \\\n  --container-format gz \\\n  --checksum $(cat /tmp/remember.md5)  The second vdc-manage command tells Wakame-vdc that this  backup object \nis a machine image that we can start instances of.  /opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage image add local bo-customimage \\\n  --account-id a-shpoolxx \\\n  --uuid wmi-customimage \\\n  --root-device uuid:$(source /tmp/remember.uuid-etc ; echo $UUID) \\\n  --display-name \"New image with web server and one static page\"  Note that the $() expressions here supply the command with necessary\ndetails about the machine image, assuming it was collected as in the example\nsteps above.  The names  bkst-local  and  a-shpoolxx  will work if\nyour are installing into an environment that was created by following\nthe  Wakame-vdc install guide .  The correct values for\nother situations can be typed directly into the command line.",
            "title": "Overview"
        },
        {
            "location": "/usage/custom-machine-images/#using-and-testing-the-new-image",
            "text": "It should now be possible to start an instance from the machine image\nby following the instructions in the  basic usage guide .  The only necessary modification to these instructions\nis to use your new image name (such as  customimage  in the example above) instead of lucid5d.\nYou can find the IP address of your instance from the \"Instances\" User Interface screen.  If your image came from the instructions on this page, you can confirm that everything\nworks by doing the following:   Add the line \"tcp:80,80,ip4:0.0.0.0\" to the security group.  Point a web browser to the instance's IP address.   The web browser should now be displaying the text: \"An Example top web page.\"",
            "title": "Using and testing the new image"
        },
        {
            "location": "/instance-backup/",
            "text": "Overview\n\n\nIn Wakame-vdc it is possible to take a running \ninstance\n and turn it into a new \nmachine image\n. We simply call this process \nbackup\n.\n\n\nThis is a quick and easy way to create new machine images. For example, you could start up an instance, install a web server in it and then back it up. Now you'll have a machine image with a web server installed and you'll immediately be able to start a any amount of web server instances.\n\n\nRequirements\n\n\nYou of course need a working Wakame-vdc installation. You can use either the \nVirtualBox demo image\n or create your own environment using the \ninstallation guide\n.\n\n\nYou need to tell Wakame-vdc which \nbackup storage\n to use when backing up instances. Both the VirtualBox image and the installation guide will set that up but just in case, here it is again.\n\n\nFigure out which backup storage you want to use with \nvdc-manage\n.\n\n\n/opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage backupstorage show\n\n\n\n\nOn an environment installed according to the installation guide, it will have this output\n\n\nUUID            Storage Type         Base URI\nbkst-local      local                file:///var/lib/wakame-vdc/images/\n\n\n\n\nThere's only one backup storage defined and its UUID is \nbkst-local\n. We need to make sure this is set in \ndcmgr.conf\n.\n\n\ngrep backup_storage_id /etc/wakame-vdc/dcmgr.conf\n\n\n\n\nThat command should have an output similar to this.\n\n\nbackup_storage_id 'bkst-local'\n\n\n\n\nIf it does not show the UUID of the backup storage you want to use, open the file with a text editor and change that line.\n\n\nUsage\n\n\nYou need to have started an \ninstance\n in order to back it up. If you don't know how to start an instance, you can find the instructions in \nthe basic usage guide\n.\n\n\nBefore you can create a backup, you have to power off your instance. On the Instances page of the GUI, tick the checkbox next to your instance and click on \nSelect an Action\n.\n\n\n\n\nNext, click on \nPower Off\n.\n\n\nRemark\n\n\nMake sure to click on \nPower Off\n and not \nStop\n. \nStop\n will delete the instance while keeping its ip address and memory etc. reserved. When starting it again afterwards, it will run a new instance in its place.\n\n\nPower Off\n means that the instance's OS will get the shutdown signal and the instance will gracefully shut down. It is equivalent to shutting down a physical server. You will be able to \nPower On\n the same instance again later.\n\n\n\n\nYour instance should now have the state of \nhalting\n. Wait a few moments and click on the \nRefresh\n button. Repeat until your instance has reached the state of \nhalted\n.\n\n\n\n\nNow tick the checkbox next to your instance again and click \nBackup\n.\n\n\n\n\nThe \nCreate Instance Backup\n dialog will pop up. Fill in the \nBackup Display Name\n field. This will become the name of your new \nmachine image\n. Click on \nBackup\n when you've filled it in.\n\n\n\n\nYou'll be taken back to the instances page. Click on \nMachine Images\n in the menu on the left.\n\n\n\n\nYou should see your new machine image with the state of \ncreating\n. Wait a few moments and click on \nRefresh\n. Eventually your image will reach the state of \navailable\n.\n\n\n\n\nOnce your image has reached the state of \navailable\n, you are done. You are now free to \nPower On\n the original instance again and/or start new instances of this machine image.",
            "title": "Instance Backup"
        },
        {
            "location": "/instance-backup/#overview",
            "text": "In Wakame-vdc it is possible to take a running  instance  and turn it into a new  machine image . We simply call this process  backup .  This is a quick and easy way to create new machine images. For example, you could start up an instance, install a web server in it and then back it up. Now you'll have a machine image with a web server installed and you'll immediately be able to start a any amount of web server instances.",
            "title": "Overview"
        },
        {
            "location": "/instance-backup/#requirements",
            "text": "You of course need a working Wakame-vdc installation. You can use either the  VirtualBox demo image  or create your own environment using the  installation guide .  You need to tell Wakame-vdc which  backup storage  to use when backing up instances. Both the VirtualBox image and the installation guide will set that up but just in case, here it is again.  Figure out which backup storage you want to use with  vdc-manage .  /opt/axsh/wakame-vdc/dcmgr/bin/vdc-manage backupstorage show  On an environment installed according to the installation guide, it will have this output  UUID            Storage Type         Base URI\nbkst-local      local                file:///var/lib/wakame-vdc/images/  There's only one backup storage defined and its UUID is  bkst-local . We need to make sure this is set in  dcmgr.conf .  grep backup_storage_id /etc/wakame-vdc/dcmgr.conf  That command should have an output similar to this.  backup_storage_id 'bkst-local'  If it does not show the UUID of the backup storage you want to use, open the file with a text editor and change that line.",
            "title": "Requirements"
        },
        {
            "location": "/instance-backup/#usage",
            "text": "You need to have started an  instance  in order to back it up. If you don't know how to start an instance, you can find the instructions in  the basic usage guide .  Before you can create a backup, you have to power off your instance. On the Instances page of the GUI, tick the checkbox next to your instance and click on  Select an Action .   Next, click on  Power Off .  Remark  Make sure to click on  Power Off  and not  Stop .  Stop  will delete the instance while keeping its ip address and memory etc. reserved. When starting it again afterwards, it will run a new instance in its place.  Power Off  means that the instance's OS will get the shutdown signal and the instance will gracefully shut down. It is equivalent to shutting down a physical server. You will be able to  Power On  the same instance again later.   Your instance should now have the state of  halting . Wait a few moments and click on the  Refresh  button. Repeat until your instance has reached the state of  halted .   Now tick the checkbox next to your instance again and click  Backup .   The  Create Instance Backup  dialog will pop up. Fill in the  Backup Display Name  field. This will become the name of your new  machine image . Click on  Backup  when you've filled it in.   You'll be taken back to the instances page. Click on  Machine Images  in the menu on the left.   You should see your new machine image with the state of  creating . Wait a few moments and click on  Refresh . Eventually your image will reach the state of  available .   Once your image has reached the state of  available , you are done. You are now free to  Power On  the original instance again and/or start new instances of this machine image.",
            "title": "Usage"
        },
        {
            "location": "/security-groups/",
            "text": "Overview\n\n\nIn Wakame-vdc, every virtual network interface (vnic) will have its own firewall. These firewalls are implemented using \nNetfilter\n. Even if one instance has multiple vnics, they will still each have their own firewall.\n\n\nThese firewalls are implemented on the \nHVA\n and network traffic is filtered before it reaches the instance's vnic.\n\n\n\n\nFrom the user's perspective, this firewall is controlled through \nsecurity groups\n. A user can create security groups and place vnics in them. Depending on what groups a vnic is in, its firewall will decide what network traffic is allowed to pass through.\n\n\nSecurity groups are dynamic. Instances can enter and leave groups on the fly and groups can change their rules of allowed network traffic at any time. No restarts of any kind are required. Whenever a change happens in the security groups layout, the firewall of every vnic affected will update itself automatically.\n\n\n\n\nFeatures\n\n\nSecurity groups come with three distinct features.\n\n\n\n\nIsolation\n\n\nRules\n\n\nReference\n\n\n\n\nRemark:\n Technically we don't put instances in security groups. We put their virtual network interfaces (vnics) in security groups. An instance with multiple vnics is able to have different security groups for each vnic.\n\n\nIsolation\n\n\nBy default all instances are isolated from each other. That means that all L2 traffic including ARP and IPv4 between them is blocked.\n\n\nWhy do we block ARP? Because Wakame-vdc supports multi-tenancy. Imagine two users managing their own instances on the same Wakame-vdc installation. In reality those instances are probably started in the same network. We don't want user A's instances to be able to see user B's instances and vice versa. That would be an obvious security issue. That is why all ARP is blocked in addition to IPv4.\n\n\nBy putting two vnics in the same Security Group, they will get \nfull ARP and IPv4 access\n to each other.\n\n\nThe following image shows a couple of instances with vnics in different security groups and isolation between them works.\n\n\n\n\nRules\n\n\nBy default all incoming traffic to instances is blocked. Security Group rules allow you to open specific TCP ports, UDP ports, or ICMP traffic.\n\n\nThe following image shows an example of a security group that opens TCP port 22 with 3 vnics in it.\n\n\n\n\nSyntax\n\n\nFor TCP and UDP protocols:\n\n\n<protocol>:<start-port>,<end-port>,ip4:<ip-address>\n\n\n\nFor the ICMP protocol:\n\n\nicmp:<icmp-type>,<icmp-code>,ip4:<ip-address>\n\n\n\nA list of the ICMP types and codes can be found \nhere\n. The wildcard to accept any type or code is -1.\n\n\nExamples\n\n\nA rule that opens TCP port 22 for all incoming traffic.\n\n\ntcp:22,22,ip4:0.0.0.0\n\n\n\nA rule that opens TCP ports 1024 to 2048 to all ip addresses from local network 192.168.0.0/24.\n\n\ntcp:1024,2048,ip4:192.168.0.0/24\n\n\n\nA rule that opens UDP port 53 to google's dns server located at 8.8.8.8.\n\n\nudp:53,53,ip4:8.8.8.8\n\n\n\nA rule that allows all incoming ICMP traffic (like ping).\n\n\nicmp:-1,-1,ip4:0.0.0.0\n\n\n\nA rule that accepts \nnetwork unreachable\n ICMP messages (type/code: 3/0) from ip address 192.168.2.1.\n\n\nicmp:3,0,ip4:192.168.2.1\n\n\n\nReference\n\n\nA reference rule is a special type of rule. Instead of opening up a port to an ip range, you can open up a port to another security group. Take the following example.\n\n\nImagine you have a database server instance and a bunch of other instances that run database clients. You could put them all in one security group together. The clients would get access to the server but they'd have full access rather than just the port that the database server is listening on. You could put the database server in one security group and add a rule for each client instance that opens just the database port. This time the instances don't have unneeded full access but you will have to go add a new rule manually every time a new client instance is started. Neither solutions are ideal.\n\n\nThis is where reference comes in. Reference allows you to put the database server in one security group and all clients together in another. You can add a \nreference rule\n to the server's group that will open only the listening database port \nto all vnics in the clients' group\n. When vnics are added to or removed from the clients' group, the firewall is updated automatically to take them into account.\n\n\n\n\nSyntax\n\n\nThe instances is the same as regular rules, except you write another security group's uuid insetad of an IP address.\n\n\nExample\n\n\nThe database rule described above would look like this:\n\n\nFor this example two security groups exist. \nsg-dbsrv\n which has the database server in it and sg-dbclnts which has the clients in it. \nsg-dbsrv\n would contain the following rule that opens MySQL's listening port 3306 to all vnics in the client group.\n\n\ntcp:3306,3306,sg-dbclnts\n\n\n\nCreating security groups using the Wakame-vdc GUI\n\n\nAfter logging into the GUI, click on \nSecurity Groups\n in the menu on the left. Next click on \nCreate Security Group\n.\n\n\n\n\nThe following dialog will pop up. In here you will be able to write rules for your security group.\n\n\n\n\nAdding and removing vnics from security groups using the Wakame-vdc GUI\n\n\nWhen starting an instance using the Wakame-vdc GUI, you will be required to put its vnic(s) in at least one security group. Although it is possible to start instances with vnic(s) that aren't in any security groups (which results in all incoming network traffic being blocked) by querying the WebAPI directly, the GUI requires one or more to be set.\n\n\nWhen starting an instance, you'll see the following dialog. The instance's security groups can be set here. When using the GUI, all vnics of this instance will be placed in the same security groups. If you wish to have one instance with multiple vnics in different security groups, you will need to call the \nWebAPI\n directly.\n\n\n\n\nWhen you want to change the security groups of a running instance's vnic(s), click on Instances in the menu on the left of the main GUI window. Next to your instance you should see a button saying \nedit\n. Click it.\n\n\n\n\nThe dialog that pops up will allow you to set the security groups for \nall\n vnics of the instance.",
            "title": "Security Groups"
        },
        {
            "location": "/security-groups/#overview",
            "text": "In Wakame-vdc, every virtual network interface (vnic) will have its own firewall. These firewalls are implemented using  Netfilter . Even if one instance has multiple vnics, they will still each have their own firewall.  These firewalls are implemented on the  HVA  and network traffic is filtered before it reaches the instance's vnic.   From the user's perspective, this firewall is controlled through  security groups . A user can create security groups and place vnics in them. Depending on what groups a vnic is in, its firewall will decide what network traffic is allowed to pass through.  Security groups are dynamic. Instances can enter and leave groups on the fly and groups can change their rules of allowed network traffic at any time. No restarts of any kind are required. Whenever a change happens in the security groups layout, the firewall of every vnic affected will update itself automatically.",
            "title": "Overview"
        },
        {
            "location": "/security-groups/#features",
            "text": "Security groups come with three distinct features.   Isolation  Rules  Reference   Remark:  Technically we don't put instances in security groups. We put their virtual network interfaces (vnics) in security groups. An instance with multiple vnics is able to have different security groups for each vnic.  Isolation  By default all instances are isolated from each other. That means that all L2 traffic including ARP and IPv4 between them is blocked.  Why do we block ARP? Because Wakame-vdc supports multi-tenancy. Imagine two users managing their own instances on the same Wakame-vdc installation. In reality those instances are probably started in the same network. We don't want user A's instances to be able to see user B's instances and vice versa. That would be an obvious security issue. That is why all ARP is blocked in addition to IPv4.  By putting two vnics in the same Security Group, they will get  full ARP and IPv4 access  to each other.  The following image shows a couple of instances with vnics in different security groups and isolation between them works.   Rules  By default all incoming traffic to instances is blocked. Security Group rules allow you to open specific TCP ports, UDP ports, or ICMP traffic.  The following image shows an example of a security group that opens TCP port 22 with 3 vnics in it.   Syntax  For TCP and UDP protocols:  <protocol>:<start-port>,<end-port>,ip4:<ip-address>  For the ICMP protocol:  icmp:<icmp-type>,<icmp-code>,ip4:<ip-address>  A list of the ICMP types and codes can be found  here . The wildcard to accept any type or code is -1.  Examples  A rule that opens TCP port 22 for all incoming traffic.  tcp:22,22,ip4:0.0.0.0  A rule that opens TCP ports 1024 to 2048 to all ip addresses from local network 192.168.0.0/24.  tcp:1024,2048,ip4:192.168.0.0/24  A rule that opens UDP port 53 to google's dns server located at 8.8.8.8.  udp:53,53,ip4:8.8.8.8  A rule that allows all incoming ICMP traffic (like ping).  icmp:-1,-1,ip4:0.0.0.0  A rule that accepts  network unreachable  ICMP messages (type/code: 3/0) from ip address 192.168.2.1.  icmp:3,0,ip4:192.168.2.1  Reference  A reference rule is a special type of rule. Instead of opening up a port to an ip range, you can open up a port to another security group. Take the following example.  Imagine you have a database server instance and a bunch of other instances that run database clients. You could put them all in one security group together. The clients would get access to the server but they'd have full access rather than just the port that the database server is listening on. You could put the database server in one security group and add a rule for each client instance that opens just the database port. This time the instances don't have unneeded full access but you will have to go add a new rule manually every time a new client instance is started. Neither solutions are ideal.  This is where reference comes in. Reference allows you to put the database server in one security group and all clients together in another. You can add a  reference rule  to the server's group that will open only the listening database port  to all vnics in the clients' group . When vnics are added to or removed from the clients' group, the firewall is updated automatically to take them into account.   Syntax  The instances is the same as regular rules, except you write another security group's uuid insetad of an IP address.  Example  The database rule described above would look like this:  For this example two security groups exist.  sg-dbsrv  which has the database server in it and sg-dbclnts which has the clients in it.  sg-dbsrv  would contain the following rule that opens MySQL's listening port 3306 to all vnics in the client group.  tcp:3306,3306,sg-dbclnts",
            "title": "Features"
        },
        {
            "location": "/security-groups/#creating-security-groups-using-the-wakame-vdc-gui",
            "text": "After logging into the GUI, click on  Security Groups  in the menu on the left. Next click on  Create Security Group .   The following dialog will pop up. In here you will be able to write rules for your security group.",
            "title": "Creating security groups using the Wakame-vdc GUI"
        },
        {
            "location": "/security-groups/#adding-and-removing-vnics-from-security-groups-using-the-wakame-vdc-gui",
            "text": "When starting an instance using the Wakame-vdc GUI, you will be required to put its vnic(s) in at least one security group. Although it is possible to start instances with vnic(s) that aren't in any security groups (which results in all incoming network traffic being blocked) by querying the WebAPI directly, the GUI requires one or more to be set.  When starting an instance, you'll see the following dialog. The instance's security groups can be set here. When using the GUI, all vnics of this instance will be placed in the same security groups. If you wish to have one instance with multiple vnics in different security groups, you will need to call the  WebAPI  directly.   When you want to change the security groups of a running instance's vnic(s), click on Instances in the menu on the left of the main GUI window. Next to your instance you should see a button saying  edit . Click it.   The dialog that pops up will allow you to set the security groups for  all  vnics of the instance.",
            "title": "Adding and removing vnics from security groups using the Wakame-vdc GUI"
        },
        {
            "location": "/jargon-dictionary/",
            "text": "Jargon Dictionary\n\n\nA\n\n\nAxsh\n\n\nAxsh Co. LTD are the authors of Wakame-vdc and \nOpenVNet\n. Pronounced: Ah-ku-shu.\n\n\nB\n\n\nBackup Storage\n\n\nBackup storage is a means of storing \nbackup objects\n. Backup objects can be stored on a local file system, served through http or using \nIndelible FS\n (experimental).\n\n\nBackup Object\n\n\nA backup object is basically a hard drive image. Backup objects that hold bootable partitions are called \nmachine images\n.\n\n\nC\n\n\nCollector\n\n\nThe collector is one of Wakame-vdc's processes. It's in charge of making \nscheduling decisions\n and database access.\n\n\nD\n\n\nDcmgr\n\n\nStands for Data Center Manager. In Wakame-vdc, this is just another word for the \nWebAPI\n\n\nE\n\n\nEndpoint\n\n\nAn endpoint is a single part of the \nWebAPI\n that the user can call to control Wakame-vdc. For example \nGET http://<webapi ip>:<webapi port>/api/instances\n is an endpoint. \nPOST http://<webapi ip>:<webapi port>/api/images\n is another endpoint and so on.\n\n\nF\n\n\nG\n\n\nGUI\n\n\nSee \nWebUI\n.\n\n\nH\n\n\nHost/Host Node\n\n\nSee \nHVA\n.\n\n\nHVA\n\n\nThe HVA (HyperVisor Agent) is the part of Wakame-vdc that actually starts \ninstances\n. On a production environment, you would likely have several dedicated bare metal hosts for this.\n\n\nAlso known as host or host node.\n\n\nI\n\n\nInstance\n\n\nA virtual machine managed by wakame-vdc.\n\n\nInstances network\n\n\nAn L3 network in which \ninstances\n are started. This can technically be the same network used for the \nmanagement line\n but on production environments, it is probably a good idea to separate them.\n\n\nJ\n\n\nK\n\n\nL\n\n\nM\n\n\nMachine Image\n\n\nA \nbackup object\n that holds a bootable partition. You are able to start \ninstances\n of machine images.\n\n\nManagement Line / Management Network\n\n\nThis is a network that Wakame-vdc uses for communication between its different \nnodes\n.\n\n\nMeta-data\n\n\nIn Wakame-vdc's context, meta-data usually refers to information that is passed to \ninstances\n when they start. It includes for example the instance's IP addresses, network host name and thrusted public keys. Meta-data is usually delivered as files on an extra (tiny) hard drive.\n\n\nN\n\n\nNATbox\n\n\nThe NATbox is an optional Wakame-vdc node that provides one to one \nnetwork address translation\n for \ninstances\n.\n\n\nNode\n\n\nRefers to a server that a Wakame-vdc process runs on. Can be physical or a VM but not an \ninstance\n.\n\n\nO\n\n\nOpenVNet\n\n\nAn full virtual networking implementation using OpenFlow. This project is completely separate from Wakame-vdc but Wakame-vdc can use it to implement virtual networking. \nhttp://openvnet.org\n\n\nP\n\n\nQ\n\n\nR\n\n\nS\n\n\nScheduling\n\n\nThe decision making process when starting a new instance. Deciding things like the network to join, the MAC and IP address to be assigned, which \nHVA\n to use, etc. are referred to as scheduling. Scheduling takes place in Wakame-vdc's \ncollector\n.\n\n\nSecurity Group\n\n\nWakame-vdc's dynamically updating firewall. You can put \nvnics\n into groups that determine which network traffic is blocked and which is accepted. These firewalls are updated dynamically as the layout of the virtual data center changes. Read the \nsecurity groups guide\n for more details.\n\n\nT\n\n\nU\n\n\nUser data\n\n\nUser data is an arbitrary field that users can set when starting an \ninstance\n. The user data will be delivered along with \nmeta-data\n and will thus be accessible from inside the instance. For example users can create custom images with scripts in them that react to user data.\n\n\nV\n\n\nvdc-manage\n\n\nA command-line front-end for Wakame-vdc's database. It can be found at \n/opt/axsh/wakame-vdc/dcmgr/bin/wakame-vdc\n\n\nVnic / Vif\n\n\nStands for Virtual Network Interface Card or Virtual Interface. In either case, the term refers to an \ninstance's\n simulated network card.\n\n\nW\n\n\nWebAPI\n\n\nThis is Wakame-vdc's user interface. You tell Wakame-vdc to do stuff by making http requests to this API.\n\n\nWebUI\n\n\nWakame-vdc's GUI. It's actually a Rails application that sits in front of the \nWebAPI\n.\n\n\nX\n\n\nY\n\n\nZ",
            "title": "Jargon Dictionary"
        },
        {
            "location": "/jargon-dictionary/#jargon-dictionary",
            "text": "",
            "title": "Jargon Dictionary"
        },
        {
            "location": "/jargon-dictionary/#a",
            "text": "Axsh  Axsh Co. LTD are the authors of Wakame-vdc and  OpenVNet . Pronounced: Ah-ku-shu.",
            "title": "A"
        },
        {
            "location": "/jargon-dictionary/#b",
            "text": "Backup Storage  Backup storage is a means of storing  backup objects . Backup objects can be stored on a local file system, served through http or using  Indelible FS  (experimental).  Backup Object  A backup object is basically a hard drive image. Backup objects that hold bootable partitions are called  machine images .",
            "title": "B"
        },
        {
            "location": "/jargon-dictionary/#c",
            "text": "Collector  The collector is one of Wakame-vdc's processes. It's in charge of making  scheduling decisions  and database access.",
            "title": "C"
        },
        {
            "location": "/jargon-dictionary/#d",
            "text": "Dcmgr  Stands for Data Center Manager. In Wakame-vdc, this is just another word for the  WebAPI",
            "title": "D"
        },
        {
            "location": "/jargon-dictionary/#e",
            "text": "Endpoint  An endpoint is a single part of the  WebAPI  that the user can call to control Wakame-vdc. For example  GET http://<webapi ip>:<webapi port>/api/instances  is an endpoint.  POST http://<webapi ip>:<webapi port>/api/images  is another endpoint and so on.",
            "title": "E"
        },
        {
            "location": "/jargon-dictionary/#f",
            "text": "",
            "title": "F"
        },
        {
            "location": "/jargon-dictionary/#g",
            "text": "GUI  See  WebUI .",
            "title": "G"
        },
        {
            "location": "/jargon-dictionary/#h",
            "text": "Host/Host Node  See  HVA .  HVA  The HVA (HyperVisor Agent) is the part of Wakame-vdc that actually starts  instances . On a production environment, you would likely have several dedicated bare metal hosts for this.  Also known as host or host node.",
            "title": "H"
        },
        {
            "location": "/jargon-dictionary/#i",
            "text": "Instance  A virtual machine managed by wakame-vdc.  Instances network  An L3 network in which  instances  are started. This can technically be the same network used for the  management line  but on production environments, it is probably a good idea to separate them.",
            "title": "I"
        },
        {
            "location": "/jargon-dictionary/#j",
            "text": "",
            "title": "J"
        },
        {
            "location": "/jargon-dictionary/#k",
            "text": "",
            "title": "K"
        },
        {
            "location": "/jargon-dictionary/#l",
            "text": "",
            "title": "L"
        },
        {
            "location": "/jargon-dictionary/#m",
            "text": "Machine Image  A  backup object  that holds a bootable partition. You are able to start  instances  of machine images.  Management Line / Management Network  This is a network that Wakame-vdc uses for communication between its different  nodes .  Meta-data  In Wakame-vdc's context, meta-data usually refers to information that is passed to  instances  when they start. It includes for example the instance's IP addresses, network host name and thrusted public keys. Meta-data is usually delivered as files on an extra (tiny) hard drive.",
            "title": "M"
        },
        {
            "location": "/jargon-dictionary/#n",
            "text": "NATbox  The NATbox is an optional Wakame-vdc node that provides one to one  network address translation  for  instances .  Node  Refers to a server that a Wakame-vdc process runs on. Can be physical or a VM but not an  instance .",
            "title": "N"
        },
        {
            "location": "/jargon-dictionary/#o",
            "text": "OpenVNet  An full virtual networking implementation using OpenFlow. This project is completely separate from Wakame-vdc but Wakame-vdc can use it to implement virtual networking.  http://openvnet.org",
            "title": "O"
        },
        {
            "location": "/jargon-dictionary/#p",
            "text": "",
            "title": "P"
        },
        {
            "location": "/jargon-dictionary/#q",
            "text": "",
            "title": "Q"
        },
        {
            "location": "/jargon-dictionary/#r",
            "text": "",
            "title": "R"
        },
        {
            "location": "/jargon-dictionary/#s",
            "text": "Scheduling  The decision making process when starting a new instance. Deciding things like the network to join, the MAC and IP address to be assigned, which  HVA  to use, etc. are referred to as scheduling. Scheduling takes place in Wakame-vdc's  collector .  Security Group  Wakame-vdc's dynamically updating firewall. You can put  vnics  into groups that determine which network traffic is blocked and which is accepted. These firewalls are updated dynamically as the layout of the virtual data center changes. Read the  security groups guide  for more details.",
            "title": "S"
        },
        {
            "location": "/jargon-dictionary/#t",
            "text": "",
            "title": "T"
        },
        {
            "location": "/jargon-dictionary/#u",
            "text": "User data  User data is an arbitrary field that users can set when starting an  instance . The user data will be delivered along with  meta-data  and will thus be accessible from inside the instance. For example users can create custom images with scripts in them that react to user data.",
            "title": "U"
        },
        {
            "location": "/jargon-dictionary/#v",
            "text": "vdc-manage  A command-line front-end for Wakame-vdc's database. It can be found at  /opt/axsh/wakame-vdc/dcmgr/bin/wakame-vdc  Vnic / Vif  Stands for Virtual Network Interface Card or Virtual Interface. In either case, the term refers to an  instance's  simulated network card.",
            "title": "V"
        },
        {
            "location": "/jargon-dictionary/#w",
            "text": "WebAPI  This is Wakame-vdc's user interface. You tell Wakame-vdc to do stuff by making http requests to this API.  WebUI  Wakame-vdc's GUI. It's actually a Rails application that sits in front of the  WebAPI .",
            "title": "W"
        },
        {
            "location": "/jargon-dictionary/#x",
            "text": "",
            "title": "X"
        },
        {
            "location": "/jargon-dictionary/#y",
            "text": "",
            "title": "Y"
        },
        {
            "location": "/jargon-dictionary/#z",
            "text": "",
            "title": "Z"
        },
        {
            "location": "/faq/",
            "text": "F.A.Q.\n\n\nWhat operating system will Wakame-vdc run on?\n\n\nWe are officially supporting Centos 6 x86 64 bit. It is possible that it'll run on other operating systems as well but this is the only one we're testing on. All current production environments also run on it.\n\n\nIs Wakame-vdc currently being used in production anywhere?\n\n\nYes, it is. Check our section on the \nhomepage\n for references.\n\n\nCan I run Wakame-vdc in a virtual machine?\n\n\nAbsolutely. We do it all the time in development.\n\n\nIt works really well when you use OpenVZ as your hypervisor. Since OpenVZ is a container and not full virtualization, it doesn't have the usual overhead that comes with nested virtualization. LXC should work just as well but isn't tested as extensively. Nested KVM also works if the host's cpu supports it but is a lot slower.\n\n\nOur \nVirtualBox demo image\n implements Wakame-vdc in a virtual machine using OpenVZ and our \ninstallation guide\n can be used to do the same.\n\n\nWhat Hypervisors does Wakame-vdc support?\n\n\nCurrently the following:\n\n\n\n\n\n\nKVM\n\n\n\n\n\n\nOpenVZ\n\n\n\n\n\n\nLXC\n\n\n\n\n\n\nVMWare ESXi\n (Experimental only)\n\n\n\n\n\n\nWhat OS can I run on Wakame-vdc's instances?\n\n\nDepends on which hypervisor you use. If you use a container like OpenVZ or LXC, all instances will use the same kernel as your host OS. Therefore your instances will be running either the same OS as your host or something very close to it.\n\n\nIf you use a full virtualization hypervisor like KVM, you can run any OS that you want in your instances.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#faq",
            "text": "",
            "title": "F.A.Q."
        },
        {
            "location": "/faq/#what-operating-system-will-wakame-vdc-run-on",
            "text": "We are officially supporting Centos 6 x86 64 bit. It is possible that it'll run on other operating systems as well but this is the only one we're testing on. All current production environments also run on it.",
            "title": "What operating system will Wakame-vdc run on?"
        },
        {
            "location": "/faq/#is-wakame-vdc-currently-being-used-in-production-anywhere",
            "text": "Yes, it is. Check our section on the  homepage  for references.",
            "title": "Is Wakame-vdc currently being used in production anywhere?"
        },
        {
            "location": "/faq/#can-i-run-wakame-vdc-in-a-virtual-machine",
            "text": "Absolutely. We do it all the time in development.  It works really well when you use OpenVZ as your hypervisor. Since OpenVZ is a container and not full virtualization, it doesn't have the usual overhead that comes with nested virtualization. LXC should work just as well but isn't tested as extensively. Nested KVM also works if the host's cpu supports it but is a lot slower.  Our  VirtualBox demo image  implements Wakame-vdc in a virtual machine using OpenVZ and our  installation guide  can be used to do the same.",
            "title": "Can I run Wakame-vdc in a virtual machine?"
        },
        {
            "location": "/faq/#what-hypervisors-does-wakame-vdc-support",
            "text": "Currently the following:    KVM    OpenVZ    LXC    VMWare ESXi  (Experimental only)",
            "title": "What Hypervisors does Wakame-vdc support?"
        },
        {
            "location": "/faq/#what-os-can-i-run-on-wakame-vdcs-instances",
            "text": "Depends on which hypervisor you use. If you use a container like OpenVZ or LXC, all instances will use the same kernel as your host OS. Therefore your instances will be running either the same OS as your host or something very close to it.  If you use a full virtualization hypervisor like KVM, you can run any OS that you want in your instances.",
            "title": "What OS can I run on Wakame-vdc's instances?"
        },
        {
            "location": "/community/",
            "text": "Contribute\n\n\nThis article is about contributing documentation. If you wish to contribute code, please read \nthe development guide\n instead.\n\n\nIf you wish to contribute to this website, you will need to have a \nGithub\n account and be familiar with \nGit\n. You can contribute using Github's \nfork & pull\n system. We will review your contributions and possibly ask you to change around a few things.\n\n\nThis will not be a one-way conversation. We welcome (well argumented and respectful) discussions about what the documentation should be like. Once we're satisfied with your contribution, we will merge it and publish it to the main website.\n\n\nThis site's documentation repository is located here: \nhttps://github.com/axsh/wakame-vdc/docs\n\n\nTip:\n If you want to preview your changes locally, try running \nmkdocs\n.",
            "title": "Community"
        },
        {
            "location": "/community/#contribute",
            "text": "This article is about contributing documentation. If you wish to contribute code, please read  the development guide  instead.  If you wish to contribute to this website, you will need to have a  Github  account and be familiar with  Git . You can contribute using Github's  fork & pull  system. We will review your contributions and possibly ask you to change around a few things.  This will not be a one-way conversation. We welcome (well argumented and respectful) discussions about what the documentation should be like. Once we're satisfied with your contribution, we will merge it and publish it to the main website.  This site's documentation repository is located here:  https://github.com/axsh/wakame-vdc/docs  Tip:  If you want to preview your changes locally, try running  mkdocs .",
            "title": "Contribute"
        }
    ]
}