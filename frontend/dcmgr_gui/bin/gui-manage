#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

load File.expand_path('../../config/boot.rb', __FILE__)

require 'thor'
require 'thor/group'
require 'erb'

module Cli
  require 'cli/errors'

  autoload :Base, 'cli/base'
  autoload :AccountCli, 'cli/account'
  autoload :UserCli, 'cli/user'
  autoload :Error, 'cli/errors'
end

class RootCli < Thor
  register(Cli::AccountCli, Cli::AccountCli.namespace, "account sub-command", "Operations for accounts")
  register(Cli::UserCli, Cli::UserCli.namespace, "user sub-command", "Operations for users")
end

module TxMode
  module Bulk
    def loop
      Dcmgr::Models::BaseNew.db.transaction do
        super
      end
    end
  end
  
  module Each
    def loop_eval(str)
      Dcmgr::Models::BaseNew.db.transaction do
        super
      end
    end
  end
end

module GuiManageShell

  def loop_eval(str)
    args = Shellwords.shellsplit(str)
    if !args.empty?
      RootCli.start(args.dup)
    end
  end

  def print_result(result)
    # do nothing from ripl.
  end
  
end

require File.expand_path('../../config/initializers/sequel', __FILE__)
# load model classes under app/models.
require 'autoload'

require 'optparse'

TX_MODES=['each', 'none', 'bulk'].freeze
options = {:tx_mode=>TX_MODES.first}

argv = ARGV.dup
OptionParser.new { |o|
  o.banner += " [TASK [options]]"
  o.on('--tx TYPE', '--tx-mode=TYPE', "Set transaction mode (default: #{TX_MODES.first}): #{TX_MODES.join(', ')}") { |v|
    if TX_MODES.member?(v)
      options[:tx_mode]=v.to_sym
    else
      abort("Unknown tx-mode value: #{v}")
    end
  }
  o.on_tail('-h', '--help', 'Show this message') do
    puts o.help
    RootCli.start(["-h"])
    exit
  end
}.order!(argv)

if !argv.empty?
  begin
    BaseNew.db.transaction do
      RootCli.start(argv)
    end
  rescue => e
    e = Cli::Error.new(e,101) unless e.is_a?(Cli::Error)
    STDERR.puts "ERROR: " + e.message
    if e.respond_to?(:exit_code)
      exit(e.exit_code)
    else
      exit(1)
    end
  end
else
  # Interactive shell mode
  require 'ripl'
  require 'shellwords'
  
  Ripl::Shell.include GuiManageShell
  if options[:tx_mode] == :each
    Ripl::Shell.include TxMode::Each
  else
    Ripl::Shell.include TxMode::Bulk
  end
  Ripl::History.module_eval {
    # disable to write history file. Ripl::History is included anyway.
    def write_history; end
  }
  Ripl::Shell.create(:prompt => 'gui-manage>> ',
                     :result_prompt => '',
                     :name   => 'gui-manage',
                     :irbrc  => nil,
                     :readline=>true,
                     ).loop
end
