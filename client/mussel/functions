# -*-Shell-script-*-
#
#
#

MUSSEL_PROMPT='$'
MUSSEL_ARGS=

function extract_args() {
  MUSSEL_ARGS=
  local arg= key= value=
  while [[ $# != 0 ]]; do
    arg="$1" key= value=
    case "${arg}" in
    --*=*)
      key=${arg%%=*}; key=${key##--}; key=${key//-/_}
      value="${value} ${arg##--*=}"
      eval "${key}=\"${value}\""; value="\${${key}}"; value=$(eval echo ${value}); eval "${key}=\"${value## }\""
      ;;
    --*)
      key=${arg##--}; key=${key//-/_}
      case "$2" in
      --*|"")
        eval "${key}=1"
        ;;
      *)
        value="\${${key}} $2"
        eval "${key}=\"${value}\""; value="\${${key}}"; value=$(eval echo ${value}); eval "${key}=\"${value## }\""
        shift
        ;;
      esac
      ;;
    *)
      MUSSEL_ARGS="${MUSSEL_ARGS} ${arg}"
      ;;
    esac
    shift
  done
  # trim
  MUSSEL_ARGS=${MUSSEL_ARGS%% }
  MUSSEL_ARGS=${MUSSEL_ARGS## }
}

function shlog() {
  loglevel=$(echo ${loglevel:-info} | tr A-Z a-z)
  dry_run=$(echo ${dry_run:-} | tr A-Z a-z)

  case "${loglevel}" in
  debug)
    echo "${MUSSEL_PROMPT} $*"
    ;;
  *)
    ;;
  esac

  case "${dry_run}" in
  y|yes|on)
    :
   ;;
  *)
    eval $*
    ;;
  esac
}

function curl_opts() {
  echo -fsSkL -H ${http_header}
}

function request_param() {
  echo $*
}

function call_api() {
  [[ -n "${http_header}" ]] || { echo "[ERROR] 'http_header' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }

  shlog curl $(curl_opts) $(request_param $*)
}

function cmd_index() {
  local namespace=$1 cmd=$2 uuid=$3

  call_api -X GET "${base_uri}/${namespace}s.${format}?${xquery}"
}

function cmd_show() {
  local namespace=$1 cmd=$2 uuid=$3
  [[ -n "${namespace}" ]] || { echo "[ERROR] 'namespace' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }
  [[ -n "${cmd}"       ]] || { echo "[ERROR] 'cmd' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }
  [[ -n "${uuid}"      ]] || { echo "[ERROR] 'uuid' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }

  call_api -X GET "${base_uri}/${namespace}s/${uuid}.${format}"
}

function cmd_xget() {
  local namespace=$1 cmd=$2 uuid=$3
  [[ -n "${namespace}" ]] || { echo "[ERROR] 'namespace' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }
  [[ -n "${cmd}"       ]] || { echo "[ERROR] 'cmd' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }
  [[ -n "${uuid}"      ]] || { echo "[ERROR] 'uuid' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }

  call_api -X GET "${base_uri}/${namespace}s/${uuid}/${cmd}.${format}"
}

function cmd_xcreate() {
  local namespace=$1
  [[ -n "${namespace}" ]] || { echo "[ERROR] 'namespace' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }

  call_api -X POST ${MUSSEL_CUSTOM_DATA} "${base_uri}/${namespace}s.${format}"
}

function cmd_destroy() {
  local namespace=$1 cmd=$2 uuid=$3
  [[ -n "${namespace}" ]] || { echo "[ERROR] 'namespace' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }
  [[ -n "${cmd}"       ]] || { echo "[ERROR] 'cmd' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }
  [[ -n "${uuid}"      ]] || { echo "[ERROR] 'uuid' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }

  call_api -X DELETE "${base_uri}/${namespace}s/${uuid}.${format}"
}

function cmd_help() {
  local namespace=$1 cmd=$2 uuid=$3
  [[ -n "${namespace}" ]] || { echo "[ERROR] 'namespace' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }
  [[ -n "${cmd}"       ]] || { echo "[ERROR] 'cmd' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }

  echo "$0 ${namespace} [help|${cmd}]" >&2
}

function cmd_default() {
  local namespace=$1 cmd=$2 uuid=$3
  [[ -n "${namespace}" ]] || { echo "[ERROR] 'namespace' is empty (${BASH_SOURCE[0]##*/}:${LINENO})" >&2; return 1; }

  [[ $# = 1 ]] && cmd_index $* || $0 ${namespace} help
}

function run_cmd() {
  :
}
