# -*-Shell-script-*-
#
# 11.12
#

MUSSEL_RESOURCES="
 host_node
 image
 instance
 instance_spec
 network
 security_group
 ssh_key_pair
 storage_node
 volume
 volume_snapshot
"

function run_cmd() {
local namespace=$1 cmd=$2

case "${namespace}" in

instance)
  case "${cmd}" in
  help)    cmd_help    ${namespace} "index|show|create|destroy|reboot" ;;
  index)   cmd_index   $* ;;
  show)    cmd_show    $* ;;
  destroy) cmd_destroy $* ;;

  create)
    image_id=${image_id:-wmi-lucid0}
    instance_spec_id=${instance_spec_id:-is-demospec}
    ssh_key_id=${ssh_key_id:-ssh-demo}
    security_groups=${security_groups:-sg-demofgr}
    hostname=${hostname:-}
    ha_enabled=${ha_enabled:-false}
    network_scheduler=${network_scheduler:-default}
    host_id=${host_id}
    host_node_id=${host_node_id:-${host_id}}
    user_data=${user_data:-}

    call_api -X POST \
     --data-urlencode "image_id=${image_id}" \
     --data-urlencode "instance_spec_id=${instance_spec_id}"  \
     --data-urlencode "ssh_key_id=${ssh_key_id}" \
     --data-urlencode "security_groups[]=${security_groups}" \
     --data-urlencode "ha_enabled=${ha_enabled}" \
     --data-urlencode "network_scheduler=${network_scheduler}" \
     $([[ -z "${hostname}" ]] || echo \
     --data-urlencode "hostname=${hostname}") \
     $([[ -z "${host_node_id}" ]] || echo \
     --data-urlencode "host_node_id=${host_node_id}") \
     $(
       if [[ -f "${user_data}" ]]; then
         echo --data-urlencode "user_data@${user_data}"
       elif [[ -n "${user_data}" ]]; then
         echo --data-urlencode "user_data=${user_data}"
       fi
     ) \
     ${base_uri}/${namespace}s.${format}
    ;;
  reboot|stop|start)
    uuid=$3
    call_api -X PUT -d "''" \
     ${base_uri}/${namespace}s/${uuid}/${cmd}.${format}
    ;;
  *)       cmd_default $* ;;
  esac
  ;;

security_group)
  case "${cmd}" in
  help)    cmd_help    ${namespace} "index|show|create|update|destroy" ;;
  index)   cmd_index   $* ;;
  show)    cmd_show    $* ;;
  destroy) cmd_destroy $* ;;
  create)
    description=$3
    rule=$4
    [[ -z "${description}" ]] && { echo "${namespace} ${cmd} NAME" >&2; return 1; }
    call_api -X POST \
     --data-urlencode "description=${description}" \
     --data-urlencode "rule=${rule}" \
     ${base_uri}/${namespace}s.${format}
    ;;
  update)
    description=$3
    rule=$4
    [[ -z "${description}" ]] && { echo "${namespace} ${cmd} ID" >&2; return 1; }
    call_api -X PUT \
     --data-urlencode "rule=${rule}" \
     ${base_uri}/${namespace}s/${description}.${format}
    ;;
  *)       cmd_default $* ;;
  esac
  ;;

volume)
  case "${cmd}" in
  help)    cmd_help    ${namespace} "index|show|create|attach|detach|destroy" ;;
  index)   cmd_index   $* ;;
  show)    cmd_show    $* ;;
  destroy) cmd_destroy $* ;;
  create)
    volume_size=${3:-10}
    call_api -X POST \
     --data-urlencode "volume_size=${volume_size}" \
     ${base_uri}/${namespace}s.${format}
    ;;
  attach|detach)
    uuid=$3
    [[ $# = 4 ]] || { echo "${namespace} ${cmd} [vol-id] [inst-id]" >&2; return 1; }
    call_api -X PUT -d "''" \
     "${base_uri}/${namespace}s/${uuid}/${cmd}.${format}?instance_id"
    ;;
  *)       cmd_default $* ;;
  esac
  ;;

ssh_key_pair)
  case "${cmd}" in
  help)    cmd_help    ${namespace} "index|show|create|destroy" ;;
  index)   cmd_index   $* ;;
  show)    cmd_show    $* ;;
  create)
    name=$3
    [[ -z "${name}" ]] && { echo "${namespace} ${cmd} NAME" >&2; return 1; }
    call_api -X POST \
     --data-urlencode "name=${name}" \
     ${base_uri}/${namespace}s.${format}
    ;;
  destroy) cmd_destroy $* ;;
  *)       cmd_default $* ;;
  esac
  ;;

network)
  case "${cmd}" in
  help)    cmd_help    ${namespace} "index|show|create|destroy" ;;
  index)   cmd_index   $* ;;
  show)    cmd_show    $* ;;
  destroy) cmd_destroy $* ;;
  create)
    gw=${gw}
    prefix=${prefix}
    description=${description}

    [[ -z "${gw}"         ]] && { echo "'gw' is empty." >&2; return 1; }
    [[ -z "${network}"    ]] && { echo "'network' is empty." >&2; return 1; }
    [[ -z "${prefix}"     ]] && { echo "'prefix' is empty." >&2; return 1; }
    [[ -z "${description}"]] && { echo "'description' is empty." >&2; return 1; }
    call_api -X POST \
     --data-urlencode "gw=${gw}" \
     --data-urlencode "network=${network}" \
     --data-urlencode "prefix=${prefix}"  \
     --data-urlencode "description=${description}" \
     ${base_uri}/${namespace}s.${format}
    ;;
  reserve|release)
    uuid=$3
    ipaddr=$4
    [[ $# = 4 ]] || { echo "${namespace} ${cmd} [network-id] [ipaddr]" >&2; return 1; }
    call_api -X PUT -d "''" \
     "${base_uri}/${namespace}s/${uuid}/${cmd}.${format}?ipaddr=${ipaddr}"
    ;;
  add_pool|del_pool)
    uuid=$3
    name=$4
    [[ $# = 4 ]] || { echo "${namespace} ${cmd} [network-id] [pool-name]" >&2; return 1; }
    call_api -X PUT -d "''" \
     "${base_uri}/${namespace}s/${uuid}/${cmd}.${format}?name=${name}"
    ;;
  get_pool)
    cmd_xget $*
    ;;
  *)       cmd_default $* ;;
  esac
  ;;

host_node|storage_node|image|instance_spec|volume_snapshot)
  case "${cmd}" in
  help)    cmd_help    ${namespace} "index|show" ;;
  index)   cmd_index   $* ;;
  show)    cmd_show    $* ;;
  *)       cmd_default $* ;;
  esac
  ;;

*)
  echo "$0 [instance|security_group|volume|ssh_key_pair|network|host_node|storage_node|image|instance_spec|volume_snapshot] [method]" >&2; return 1
  ;;

esac
}
